=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 1.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module StandoutFortnox
  class CustomersCustomers
    # Direct URL to the record.
    attr_accessor :url

    # Address 1 of the customer.
    attr_accessor :address1

    # Address 2 of the customer.
    attr_accessor :address2

    # City of the customer.
    attr_accessor :city

    # Customer number of the customer. If no customer number is provided, the next number in the series will be used. Only alpha numeric characters, with the addition of â€“ + / and _, are allowed.
    attr_accessor :customer_number

    # Email address for the customer. This must be a valid email address.
    attr_accessor :email

    # Name of the customer.
    attr_accessor :name

    # Organisation number of the customer. It needs to be a valid organisation number.
    attr_accessor :organisation_number

    # Phone number of the customer.
    attr_accessor :phone

    # Zip code of the customers.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'@url',
        :'address1' => :'Address1',
        :'address2' => :'Address2',
        :'city' => :'City',
        :'customer_number' => :'CustomerNumber',
        :'email' => :'Email',
        :'name' => :'Name',
        :'organisation_number' => :'OrganisationNumber',
        :'phone' => :'Phone',
        :'zip_code' => :'ZipCode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'url' => :'String',
        :'address1' => :'String',
        :'address2' => :'String',
        :'city' => :'String',
        :'customer_number' => :'String',
        :'email' => :'String',
        :'name' => :'String',
        :'organisation_number' => :'String',
        :'phone' => :'String',
        :'zip_code' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'@url')
        self.url = attributes[:'@url']
      end

      if attributes.has_key?(:'Address1')
        self.address1 = attributes[:'Address1']
      end

      if attributes.has_key?(:'Address2')
        self.address2 = attributes[:'Address2']
      end

      if attributes.has_key?(:'City')
        self.city = attributes[:'City']
      end

      if attributes.has_key?(:'CustomerNumber')
        self.customer_number = attributes[:'CustomerNumber']
      end

      if attributes.has_key?(:'Email')
        self.email = attributes[:'Email']
      end

      if attributes.has_key?(:'Name')
        self.name = attributes[:'Name']
      end

      if attributes.has_key?(:'OrganisationNumber')
        self.organisation_number = attributes[:'OrganisationNumber']
      end

      if attributes.has_key?(:'Phone')
        self.phone = attributes[:'Phone']
      end

      if attributes.has_key?(:'ZipCode')
        self.zip_code = attributes[:'ZipCode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@address1.nil? && @address1.to_s.length > 1024
        invalid_properties.push('invalid value for "address1", the character length must be smaller than or equal to 1024.')
      end

      if !@address2.nil? && @address2.to_s.length > 1024
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 1024.')
      end

      if !@city.nil? && @city.to_s.length > 1024
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 1024.')
      end

      if !@customer_number.nil? && @customer_number.to_s.length > 1024
        invalid_properties.push('invalid value for "customer_number", the character length must be smaller than or equal to 1024.')
      end

      if !@email.nil? && @email.to_s.length > 1024
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 1024.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 1024
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 1024.')
      end

      if !@organisation_number.nil? && @organisation_number.to_s.length > 30
        invalid_properties.push('invalid value for "organisation_number", the character length must be smaller than or equal to 30.')
      end

      if !@phone.nil? && @phone.to_s.length > 1024
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 1024.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 10
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 10.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@address1.nil? && @address1.to_s.length > 1024
      return false if !@address2.nil? && @address2.to_s.length > 1024
      return false if !@city.nil? && @city.to_s.length > 1024
      return false if !@customer_number.nil? && @customer_number.to_s.length > 1024
      return false if !@email.nil? && @email.to_s.length > 1024
      return false if @name.nil?
      return false if @name.to_s.length > 1024
      return false if !@organisation_number.nil? && @organisation_number.to_s.length > 30
      return false if !@phone.nil? && @phone.to_s.length > 1024
      return false if !@zip_code.nil? && @zip_code.to_s.length > 10
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] address1 Value to be assigned
    def address1=(address1)
      if !address1.nil? && address1.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address1", the character length must be smaller than or equal to 1024.'
      end

      @address1 = address1
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 1024.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 1024
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 1024.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_number Value to be assigned
    def customer_number=(customer_number)
      if !customer_number.nil? && customer_number.to_s.length > 1024
        fail ArgumentError, 'invalid value for "customer_number", the character length must be smaller than or equal to 1024.'
      end

      @customer_number = customer_number
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 1024.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 1024
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 1024.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] organisation_number Value to be assigned
    def organisation_number=(organisation_number)
      if !organisation_number.nil? && organisation_number.to_s.length > 30
        fail ArgumentError, 'invalid value for "organisation_number", the character length must be smaller than or equal to 30.'
      end

      @organisation_number = organisation_number
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 1024
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 1024.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 10.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          address1 == o.address1 &&
          address2 == o.address2 &&
          city == o.city &&
          customer_number == o.customer_number &&
          email == o.email &&
          name == o.name &&
          organisation_number == o.organisation_number &&
          phone == o.phone &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [url, address1, address2, city, customer_number, email, name, organisation_number, phone, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = StandoutFortnox.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
