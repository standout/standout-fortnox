=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.23

=end

require 'date'

module StandoutFortnox
  class InvoicesInvoices
    # Direct url to the record.
    attr_accessor :url

    # Balance of the invoice.
    attr_accessor :balance

    # If the invoice is bookkept. This value can be changed by using the action 'bookkeep'.
    attr_accessor :booked

    # If the invoice is cancelled. This value can be changed by using the action 'cancel'.
    attr_accessor :cancelled

    # Code of the cost center. The code must be of an existing cost center.
    attr_accessor :cost_center

    # Code of the currency. The code must be of an existing currency.
    attr_accessor :currency

    # Currency rate used for the invoice.
    attr_accessor :currency_rate

    # Currency unit used for the invoice.
    attr_accessor :currency_unit

    # Name of the customer.
    attr_accessor :customer_name

    # Customer number of the customer. The customer number must be of an existing customer.
    attr_accessor :customer_number

    # The invoice number. If no document number is provided, the next number in the series will be used.
    attr_accessor :document_number

    # Due date of the invoice. Must be a valid date according to our date format.
    attr_accessor :due_date

    # External invoice reference 1.
    attr_accessor :external_invoice_reference1

    # External invoice reference 2.
    attr_accessor :external_invoice_reference2

    # Invoice date. Must be a valid date according to our date format.
    attr_accessor :invoice_date

    # The type of invoice. Can be INVOICE AGREEMENTINVOICE INTRESTINVOICE SUMMARYINVOICE or CASHINVOICE.
    attr_accessor :invoice_type

    # If the invoice is managed by NoxFinans
    attr_accessor :nox_finans

    # OCR number of the invoice.
    attr_accessor :ocr

    # Code of the project. The code must be of an existing project.
    attr_accessor :project

    # If the document is printed or sent in any way.
    attr_accessor :sent

    # Code of the terms of payment. The code must be of an existing terms of payment.
    attr_accessor :terms_of_payment

    # The total amount of the invoice.
    attr_accessor :total

    # Code of the way of delivery. The code must be of an existing way of delivery.
    attr_accessor :way_of_delivery

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'@url',
        :'balance' => :'Balance',
        :'booked' => :'Booked',
        :'cancelled' => :'Cancelled',
        :'cost_center' => :'CostCenter',
        :'currency' => :'Currency',
        :'currency_rate' => :'CurrencyRate',
        :'currency_unit' => :'CurrencyUnit',
        :'customer_name' => :'CustomerName',
        :'customer_number' => :'CustomerNumber',
        :'document_number' => :'DocumentNumber',
        :'due_date' => :'DueDate',
        :'external_invoice_reference1' => :'ExternalInvoiceReference1',
        :'external_invoice_reference2' => :'ExternalInvoiceReference2',
        :'invoice_date' => :'InvoiceDate',
        :'invoice_type' => :'InvoiceType',
        :'nox_finans' => :'NoxFinans',
        :'ocr' => :'OCR',
        :'project' => :'Project',
        :'sent' => :'Sent',
        :'terms_of_payment' => :'TermsOfPayment',
        :'total' => :'Total',
        :'way_of_delivery' => :'WayOfDelivery'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'url' => :'String',
        :'balance' => :'Float',
        :'booked' => :'BOOLEAN',
        :'cancelled' => :'BOOLEAN',
        :'cost_center' => :'String',
        :'currency' => :'String',
        :'currency_rate' => :'Float',
        :'currency_unit' => :'Float',
        :'customer_name' => :'String',
        :'customer_number' => :'String',
        :'document_number' => :'Integer',
        :'due_date' => :'DateTime',
        :'external_invoice_reference1' => :'String',
        :'external_invoice_reference2' => :'String',
        :'invoice_date' => :'String',
        :'invoice_type' => :'String',
        :'nox_finans' => :'BOOLEAN',
        :'ocr' => :'String',
        :'project' => :'String',
        :'sent' => :'BOOLEAN',
        :'terms_of_payment' => :'String',
        :'total' => :'Float',
        :'way_of_delivery' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'@url')
        self.url = attributes[:'@url']
      end

      if attributes.has_key?(:'Balance')
        self.balance = attributes[:'Balance']
      end

      if attributes.has_key?(:'Booked')
        self.booked = attributes[:'Booked']
      end

      if attributes.has_key?(:'Cancelled')
        self.cancelled = attributes[:'Cancelled']
      end

      if attributes.has_key?(:'CostCenter')
        self.cost_center = attributes[:'CostCenter']
      end

      if attributes.has_key?(:'Currency')
        self.currency = attributes[:'Currency']
      end

      if attributes.has_key?(:'CurrencyRate')
        self.currency_rate = attributes[:'CurrencyRate']
      end

      if attributes.has_key?(:'CurrencyUnit')
        self.currency_unit = attributes[:'CurrencyUnit']
      end

      if attributes.has_key?(:'CustomerName')
        self.customer_name = attributes[:'CustomerName']
      end

      if attributes.has_key?(:'CustomerNumber')
        self.customer_number = attributes[:'CustomerNumber']
      end

      if attributes.has_key?(:'DocumentNumber')
        self.document_number = attributes[:'DocumentNumber']
      end

      if attributes.has_key?(:'DueDate')
        self.due_date = attributes[:'DueDate']
      end

      if attributes.has_key?(:'ExternalInvoiceReference1')
        self.external_invoice_reference1 = attributes[:'ExternalInvoiceReference1']
      end

      if attributes.has_key?(:'ExternalInvoiceReference2')
        self.external_invoice_reference2 = attributes[:'ExternalInvoiceReference2']
      end

      if attributes.has_key?(:'InvoiceDate')
        self.invoice_date = attributes[:'InvoiceDate']
      end

      if attributes.has_key?(:'InvoiceType')
        self.invoice_type = attributes[:'InvoiceType']
      end

      if attributes.has_key?(:'NoxFinans')
        self.nox_finans = attributes[:'NoxFinans']
      end

      if attributes.has_key?(:'OCR')
        self.ocr = attributes[:'OCR']
      end

      if attributes.has_key?(:'Project')
        self.project = attributes[:'Project']
      end

      if attributes.has_key?(:'Sent')
        self.sent = attributes[:'Sent']
      end

      if attributes.has_key?(:'TermsOfPayment')
        self.terms_of_payment = attributes[:'TermsOfPayment']
      end

      if attributes.has_key?(:'Total')
        self.total = attributes[:'Total']
      end

      if attributes.has_key?(:'WayOfDelivery')
        self.way_of_delivery = attributes[:'WayOfDelivery']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@customer_name.nil? && @customer_name.to_s.length > 1024
        invalid_properties.push('invalid value for "customer_name", the character length must be smaller than or equal to 1024.')
      end

      if !@external_invoice_reference1.nil? && @external_invoice_reference1.to_s.length > 80
        invalid_properties.push('invalid value for "external_invoice_reference1", the character length must be smaller than or equal to 80.')
      end

      if !@external_invoice_reference2.nil? && @external_invoice_reference2.to_s.length > 80
        invalid_properties.push('invalid value for "external_invoice_reference2", the character length must be smaller than or equal to 80.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@customer_name.nil? && @customer_name.to_s.length > 1024
      return false if !@external_invoice_reference1.nil? && @external_invoice_reference1.to_s.length > 80
      return false if !@external_invoice_reference2.nil? && @external_invoice_reference2.to_s.length > 80
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_name Value to be assigned
    def customer_name=(customer_name)
      if !customer_name.nil? && customer_name.to_s.length > 1024
        fail ArgumentError, 'invalid value for "customer_name", the character length must be smaller than or equal to 1024.'
      end

      @customer_name = customer_name
    end

    # Custom attribute writer method with validation
    # @param [Object] external_invoice_reference1 Value to be assigned
    def external_invoice_reference1=(external_invoice_reference1)
      if !external_invoice_reference1.nil? && external_invoice_reference1.to_s.length > 80
        fail ArgumentError, 'invalid value for "external_invoice_reference1", the character length must be smaller than or equal to 80.'
      end

      @external_invoice_reference1 = external_invoice_reference1
    end

    # Custom attribute writer method with validation
    # @param [Object] external_invoice_reference2 Value to be assigned
    def external_invoice_reference2=(external_invoice_reference2)
      if !external_invoice_reference2.nil? && external_invoice_reference2.to_s.length > 80
        fail ArgumentError, 'invalid value for "external_invoice_reference2", the character length must be smaller than or equal to 80.'
      end

      @external_invoice_reference2 = external_invoice_reference2
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          balance == o.balance &&
          booked == o.booked &&
          cancelled == o.cancelled &&
          cost_center == o.cost_center &&
          currency == o.currency &&
          currency_rate == o.currency_rate &&
          currency_unit == o.currency_unit &&
          customer_name == o.customer_name &&
          customer_number == o.customer_number &&
          document_number == o.document_number &&
          due_date == o.due_date &&
          external_invoice_reference1 == o.external_invoice_reference1 &&
          external_invoice_reference2 == o.external_invoice_reference2 &&
          invoice_date == o.invoice_date &&
          invoice_type == o.invoice_type &&
          nox_finans == o.nox_finans &&
          ocr == o.ocr &&
          project == o.project &&
          sent == o.sent &&
          terms_of_payment == o.terms_of_payment &&
          total == o.total &&
          way_of_delivery == o.way_of_delivery
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [url, balance, booked, cancelled, cost_center, currency, currency_rate, currency_unit, customer_name, customer_number, document_number, due_date, external_invoice_reference1, external_invoice_reference2, invoice_date, invoice_type, nox_finans, ocr, project, sent, terms_of_payment, total, way_of_delivery].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = StandoutFortnox.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
