=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module StandoutFortnox
  class InvoiceInvoice
    # Direct url to the record.
    attr_accessor :url

    # Direct url to the tax reduction for the invoice. This is visible even if no tax reduction exists.
    attr_accessor :url_tax_reduction_list

    # Invoice address 1.
    attr_accessor :address1

    # Invoice address 2.
    attr_accessor :address2

    # The invoice administration fee.
    attr_accessor :administration_fee

    # VAT of the invoice administration fee.
    attr_accessor :administration_fee_vat

    # Balance of the invoice.
    attr_accessor :balance

    # Basis of tax reduction.
    attr_accessor :basis_tax_reduction

    # If the invoice is bookkept. This value can be changed by using the action 'bookkeep'.
    attr_accessor :booked

    # If the invoice is cancelled. This value can be changed by using the action 'cancel'.
    attr_accessor :cancelled

    # City for the invoice address.
    attr_accessor :city

    # Comments of the invoice
    attr_accessor :comments

    # Reference to the contract, if one exists.
    attr_accessor :contract_reference

    # Invoice contribution in percent.
    attr_accessor :contribution_percent

    # Invoice contribution in amount.
    attr_accessor :contribution_value

    # Code of the cost center. The code must be of an existing cost center.
    attr_accessor :cost_center

    # Country for the invoice address. Must be a name of an existing country.
    attr_accessor :country

    # If the invoice is a credit invoice.
    attr_accessor :credit

    # Reference to the credit invoice, if one exits. The reference must be a document number for an existing credit invoice.
    attr_accessor :credit_invoice_reference

    # Code of the currency. The code must be of an existing currency.
    attr_accessor :currency

    # Currency rate used for the invoice.
    attr_accessor :currency_rate

    # Currency unit used for the invoice.
    attr_accessor :currency_unit

    # Name of the customer.
    attr_accessor :customer_name

    # Customer number of the customer. The customer number must be of an existing customer.
    attr_accessor :customer_number

    # Invoice delivery address 1.
    attr_accessor :delivery_address1

    # Invoice delivery address 2.
    attr_accessor :delivery_address2

    # City for the invoice delivery address.
    attr_accessor :delivery_city

    # Country for the invoice delivery address. Must be a name of an existing country.
    attr_accessor :delivery_country

    # Date of delivery. Must be a valid date according to our date format.
    attr_accessor :delivery_date

    # Name of the recipient of the delivery
    attr_accessor :delivery_name

    # ZipCode for the invoice delivery address.
    attr_accessor :delivery_zip_code

    # The invoice number. If no document number is provided, the next number in the series will be used.
    attr_accessor :document_number

    # Due date of the invoice. Must be a valid date according to our date format.
    attr_accessor :due_date

    attr_accessor :edi_information

    # EU Quarterly Report On / Off
    attr_accessor :eu_quarterly_report

    attr_accessor :email_information

    # External invoice reference 1.
    attr_accessor :external_invoice_reference1

    # External invoice reference 2.
    attr_accessor :external_invoice_reference2

    # Freight cost of the invoice.
    attr_accessor :freight

    # VAT of the freight cost.
    attr_accessor :freight_vat

    # Gross value of the invoice
    attr_accessor :gross

    # If there is any row of the invoice marked “house work”.
    attr_accessor :house_work

    # Invoice date. Must be a valid date according to our date format.
    attr_accessor :invoice_date

    # Start date of the invoice period, only applicable for contract invoices.
    attr_accessor :invoice_period_start

    # End date of the invoice period, only applicable for contract invoices.
    attr_accessor :invoice_period_end

    # TODO: Denna property finns inte i Fortnox's dokumentation!
    attr_accessor :invoice_reference

    # The properties for the object in this array is listed in the table “Invoice Rows”.
    attr_accessor :invoice_rows

    # The type of invoice. Can be INVOICE AGREEMENTINVOICE INTRESTINVOICE SUMMARYINVOICE or CASHINVOICE.
    attr_accessor :invoice_type

    attr_accessor :labels

    # Language code. Can be SV or EN.
    attr_accessor :language

    # Date of last reminder.
    attr_accessor :last_remind_date

    # Net amount
    attr_accessor :net

    # If the invoice is set as not completed.
    attr_accessor :not_completed

    # If the invoice is managed by NoxFinans
    attr_accessor :nox_finans

    # OCR number of the invoice.
    attr_accessor :ocr

    # Reference to the offer, if one exists.
    attr_accessor :offer_reference

    # Reference to the order, if one exists.
    attr_accessor :order_reference

    # Organisation number of the customer. It needs to be a valid organisation number.
    attr_accessor :organisation_number

    # Our reference of the customer.
    attr_accessor :our_reference

    # CASH, CARD, AG
    attr_accessor :payment_way

    # Phone number 1 of the customer.
    attr_accessor :phone1

    # Phone number 2 of the customer.
    attr_accessor :phone2

    # Code of the price list for the customer. The code must be of a an existing price list.
    attr_accessor :price_list

    # Print template of the invoice. Must be an existing print template.
    attr_accessor :print_template

    # Code of the project. The code must be of an existing project.
    attr_accessor :project

    # Remarks of the invoice. This is the invoice text shown on the invoice.
    attr_accessor :remarks

    # Number of reminders sent to the customer.
    attr_accessor :reminders

    # Round off amount for the invoice.
    attr_accessor :round_off

    # If the document is printed or sent in any way.
    attr_accessor :sent

    # The amount of tax reduction.
    attr_accessor :tax_reduction

    # Code of the terms of delivery for the customer. The code must be of a an existing terms of delivery.
    attr_accessor :terms_of_delivery

    # Code of the terms of payment. The code must be of an existing terms of payment.
    attr_accessor :terms_of_payment

    # The total amount of the invoice.
    attr_accessor :total

    # TODO: Denna property finns inte i Fortnox's dokumentation!
    attr_accessor :total_to_pay

    # The total VAT amount of the invoice.
    attr_accessor :total_vat

    # If the price of the invoice is including VAT.
    attr_accessor :vat_included

    # Voucher number for the invoice. This is created when the invoice is bookkept.
    attr_accessor :voucher_number

    # Voucher series for the invoice. This is created when the invoice is bookkept.
    attr_accessor :voucher_series

    # Voucher year for the invoice. This is created when the invoice is bookkept.
    attr_accessor :voucher_year

    # Code of the way of delivery. The code must be of an existing way of delivery.
    attr_accessor :way_of_delivery

    # Your order number.
    attr_accessor :your_order_number

    # Your reference of the customer.
    attr_accessor :your_reference

    # Zip code of the invoice.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'@url',
        :'url_tax_reduction_list' => :'@UrlTaxReductionList',
        :'address1' => :'Address1',
        :'address2' => :'Address2',
        :'administration_fee' => :'AdministrationFee',
        :'administration_fee_vat' => :'AdministrationFeeVAT',
        :'balance' => :'Balance',
        :'basis_tax_reduction' => :'BasisTaxReduction',
        :'booked' => :'Booked',
        :'cancelled' => :'Cancelled',
        :'city' => :'City',
        :'comments' => :'Comments',
        :'contract_reference' => :'ContractReference',
        :'contribution_percent' => :'ContributionPercent',
        :'contribution_value' => :'ContributionValue',
        :'cost_center' => :'CostCenter',
        :'country' => :'Country',
        :'credit' => :'Credit',
        :'credit_invoice_reference' => :'CreditInvoiceReference',
        :'currency' => :'Currency',
        :'currency_rate' => :'CurrencyRate',
        :'currency_unit' => :'CurrencyUnit',
        :'customer_name' => :'CustomerName',
        :'customer_number' => :'CustomerNumber',
        :'delivery_address1' => :'DeliveryAddress1',
        :'delivery_address2' => :'DeliveryAddress2',
        :'delivery_city' => :'DeliveryCity',
        :'delivery_country' => :'DeliveryCountry',
        :'delivery_date' => :'DeliveryDate',
        :'delivery_name' => :'DeliveryName',
        :'delivery_zip_code' => :'DeliveryZipCode',
        :'document_number' => :'DocumentNumber',
        :'due_date' => :'DueDate',
        :'edi_information' => :'EDIInformation',
        :'eu_quarterly_report' => :'EUQuarterlyReport',
        :'email_information' => :'EmailInformation',
        :'external_invoice_reference1' => :'ExternalInvoiceReference1',
        :'external_invoice_reference2' => :'ExternalInvoiceReference2',
        :'freight' => :'Freight',
        :'freight_vat' => :'FreightVAT',
        :'gross' => :'Gross',
        :'house_work' => :'HouseWork',
        :'invoice_date' => :'InvoiceDate',
        :'invoice_period_start' => :'InvoicePeriodStart',
        :'invoice_period_end' => :'InvoicePeriodEnd',
        :'invoice_reference' => :'InvoiceReference',
        :'invoice_rows' => :'InvoiceRows',
        :'invoice_type' => :'InvoiceType',
        :'labels' => :'Labels',
        :'language' => :'Language',
        :'last_remind_date' => :'LastRemindDate',
        :'net' => :'Net',
        :'not_completed' => :'NotCompleted',
        :'nox_finans' => :'NoxFinans',
        :'ocr' => :'OCR',
        :'offer_reference' => :'OfferReference',
        :'order_reference' => :'OrderReference',
        :'organisation_number' => :'OrganisationNumber',
        :'our_reference' => :'OurReference',
        :'payment_way' => :'PaymentWay',
        :'phone1' => :'Phone1',
        :'phone2' => :'Phone2',
        :'price_list' => :'PriceList',
        :'print_template' => :'PrintTemplate',
        :'project' => :'Project',
        :'remarks' => :'Remarks',
        :'reminders' => :'Reminders',
        :'round_off' => :'RoundOff',
        :'sent' => :'Sent',
        :'tax_reduction' => :'TaxReduction',
        :'terms_of_delivery' => :'TermsOfDelivery',
        :'terms_of_payment' => :'TermsOfPayment',
        :'total' => :'Total',
        :'total_to_pay' => :'TotalToPay',
        :'total_vat' => :'TotalVAT',
        :'vat_included' => :'VATIncluded',
        :'voucher_number' => :'VoucherNumber',
        :'voucher_series' => :'VoucherSeries',
        :'voucher_year' => :'VoucherYear',
        :'way_of_delivery' => :'WayOfDelivery',
        :'your_order_number' => :'YourOrderNumber',
        :'your_reference' => :'YourReference',
        :'zip_code' => :'ZipCode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'url' => :'String',
        :'url_tax_reduction_list' => :'String',
        :'address1' => :'String',
        :'address2' => :'String',
        :'administration_fee' => :'Float',
        :'administration_fee_vat' => :'Float',
        :'balance' => :'Float',
        :'basis_tax_reduction' => :'Float',
        :'booked' => :'BOOLEAN',
        :'cancelled' => :'BOOLEAN',
        :'city' => :'String',
        :'comments' => :'String',
        :'contract_reference' => :'Integer',
        :'contribution_percent' => :'Float',
        :'contribution_value' => :'Float',
        :'cost_center' => :'String',
        :'country' => :'String',
        :'credit' => :'BOOLEAN',
        :'credit_invoice_reference' => :'Integer',
        :'currency' => :'String',
        :'currency_rate' => :'Float',
        :'currency_unit' => :'Float',
        :'customer_name' => :'String',
        :'customer_number' => :'String',
        :'delivery_address1' => :'String',
        :'delivery_address2' => :'String',
        :'delivery_city' => :'String',
        :'delivery_country' => :'String',
        :'delivery_date' => :'DateTime',
        :'delivery_name' => :'String',
        :'delivery_zip_code' => :'String',
        :'document_number' => :'Integer',
        :'due_date' => :'DateTime',
        :'edi_information' => :'InvoiceInvoiceEDIInformation',
        :'eu_quarterly_report' => :'BOOLEAN',
        :'email_information' => :'InvoiceInvoiceEmailInformation',
        :'external_invoice_reference1' => :'String',
        :'external_invoice_reference2' => :'String',
        :'freight' => :'Float',
        :'freight_vat' => :'Float',
        :'gross' => :'Float',
        :'house_work' => :'BOOLEAN',
        :'invoice_date' => :'DateTime',
        :'invoice_period_start' => :'String',
        :'invoice_period_end' => :'String',
        :'invoice_reference' => :'String',
        :'invoice_rows' => :'Array<InvoiceInvoiceInvoiceRows>',
        :'invoice_type' => :'String',
        :'labels' => :'Array<InvoiceInvoiceLabels>',
        :'language' => :'String',
        :'last_remind_date' => :'DateTime',
        :'net' => :'Float',
        :'not_completed' => :'BOOLEAN',
        :'nox_finans' => :'BOOLEAN',
        :'ocr' => :'String',
        :'offer_reference' => :'Integer',
        :'order_reference' => :'String',
        :'organisation_number' => :'String',
        :'our_reference' => :'String',
        :'payment_way' => :'String',
        :'phone1' => :'String',
        :'phone2' => :'String',
        :'price_list' => :'String',
        :'print_template' => :'String',
        :'project' => :'String',
        :'remarks' => :'String',
        :'reminders' => :'Integer',
        :'round_off' => :'Float',
        :'sent' => :'BOOLEAN',
        :'tax_reduction' => :'Integer',
        :'terms_of_delivery' => :'String',
        :'terms_of_payment' => :'String',
        :'total' => :'Float',
        :'total_to_pay' => :'Float',
        :'total_vat' => :'Float',
        :'vat_included' => :'BOOLEAN',
        :'voucher_number' => :'Integer',
        :'voucher_series' => :'String',
        :'voucher_year' => :'Integer',
        :'way_of_delivery' => :'String',
        :'your_order_number' => :'String',
        :'your_reference' => :'String',
        :'zip_code' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'@url')
        self.url = attributes[:'@url']
      end

      if attributes.has_key?(:'@UrlTaxReductionList')
        self.url_tax_reduction_list = attributes[:'@UrlTaxReductionList']
      end

      if attributes.has_key?(:'Address1')
        self.address1 = attributes[:'Address1']
      end

      if attributes.has_key?(:'Address2')
        self.address2 = attributes[:'Address2']
      end

      if attributes.has_key?(:'AdministrationFee')
        self.administration_fee = attributes[:'AdministrationFee']
      end

      if attributes.has_key?(:'AdministrationFeeVAT')
        self.administration_fee_vat = attributes[:'AdministrationFeeVAT']
      end

      if attributes.has_key?(:'Balance')
        self.balance = attributes[:'Balance']
      end

      if attributes.has_key?(:'BasisTaxReduction')
        self.basis_tax_reduction = attributes[:'BasisTaxReduction']
      end

      if attributes.has_key?(:'Booked')
        self.booked = attributes[:'Booked']
      end

      if attributes.has_key?(:'Cancelled')
        self.cancelled = attributes[:'Cancelled']
      end

      if attributes.has_key?(:'City')
        self.city = attributes[:'City']
      end

      if attributes.has_key?(:'Comments')
        self.comments = attributes[:'Comments']
      end

      if attributes.has_key?(:'ContractReference')
        self.contract_reference = attributes[:'ContractReference']
      end

      if attributes.has_key?(:'ContributionPercent')
        self.contribution_percent = attributes[:'ContributionPercent']
      end

      if attributes.has_key?(:'ContributionValue')
        self.contribution_value = attributes[:'ContributionValue']
      end

      if attributes.has_key?(:'CostCenter')
        self.cost_center = attributes[:'CostCenter']
      end

      if attributes.has_key?(:'Country')
        self.country = attributes[:'Country']
      end

      if attributes.has_key?(:'Credit')
        self.credit = attributes[:'Credit']
      end

      if attributes.has_key?(:'CreditInvoiceReference')
        self.credit_invoice_reference = attributes[:'CreditInvoiceReference']
      end

      if attributes.has_key?(:'Currency')
        self.currency = attributes[:'Currency']
      end

      if attributes.has_key?(:'CurrencyRate')
        self.currency_rate = attributes[:'CurrencyRate']
      end

      if attributes.has_key?(:'CurrencyUnit')
        self.currency_unit = attributes[:'CurrencyUnit']
      end

      if attributes.has_key?(:'CustomerName')
        self.customer_name = attributes[:'CustomerName']
      end

      if attributes.has_key?(:'CustomerNumber')
        self.customer_number = attributes[:'CustomerNumber']
      end

      if attributes.has_key?(:'DeliveryAddress1')
        self.delivery_address1 = attributes[:'DeliveryAddress1']
      end

      if attributes.has_key?(:'DeliveryAddress2')
        self.delivery_address2 = attributes[:'DeliveryAddress2']
      end

      if attributes.has_key?(:'DeliveryCity')
        self.delivery_city = attributes[:'DeliveryCity']
      end

      if attributes.has_key?(:'DeliveryCountry')
        self.delivery_country = attributes[:'DeliveryCountry']
      end

      if attributes.has_key?(:'DeliveryDate')
        self.delivery_date = attributes[:'DeliveryDate']
      end

      if attributes.has_key?(:'DeliveryName')
        self.delivery_name = attributes[:'DeliveryName']
      end

      if attributes.has_key?(:'DeliveryZipCode')
        self.delivery_zip_code = attributes[:'DeliveryZipCode']
      end

      if attributes.has_key?(:'DocumentNumber')
        self.document_number = attributes[:'DocumentNumber']
      end

      if attributes.has_key?(:'DueDate')
        self.due_date = attributes[:'DueDate']
      end

      if attributes.has_key?(:'EDIInformation')
        self.edi_information = attributes[:'EDIInformation']
      end

      if attributes.has_key?(:'EUQuarterlyReport')
        self.eu_quarterly_report = attributes[:'EUQuarterlyReport']
      end

      if attributes.has_key?(:'EmailInformation')
        self.email_information = attributes[:'EmailInformation']
      end

      if attributes.has_key?(:'ExternalInvoiceReference1')
        self.external_invoice_reference1 = attributes[:'ExternalInvoiceReference1']
      end

      if attributes.has_key?(:'ExternalInvoiceReference2')
        self.external_invoice_reference2 = attributes[:'ExternalInvoiceReference2']
      end

      if attributes.has_key?(:'Freight')
        self.freight = attributes[:'Freight']
      end

      if attributes.has_key?(:'FreightVAT')
        self.freight_vat = attributes[:'FreightVAT']
      end

      if attributes.has_key?(:'Gross')
        self.gross = attributes[:'Gross']
      end

      if attributes.has_key?(:'HouseWork')
        self.house_work = attributes[:'HouseWork']
      end

      if attributes.has_key?(:'InvoiceDate')
        self.invoice_date = attributes[:'InvoiceDate']
      end

      if attributes.has_key?(:'InvoicePeriodStart')
        self.invoice_period_start = attributes[:'InvoicePeriodStart']
      end

      if attributes.has_key?(:'InvoicePeriodEnd')
        self.invoice_period_end = attributes[:'InvoicePeriodEnd']
      end

      if attributes.has_key?(:'InvoiceReference')
        self.invoice_reference = attributes[:'InvoiceReference']
      end

      if attributes.has_key?(:'InvoiceRows')
        if (value = attributes[:'InvoiceRows']).is_a?(Array)
          self.invoice_rows = value
        end
      end

      if attributes.has_key?(:'InvoiceType')
        self.invoice_type = attributes[:'InvoiceType']
      end

      if attributes.has_key?(:'Labels')
        if (value = attributes[:'Labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.has_key?(:'Language')
        self.language = attributes[:'Language']
      end

      if attributes.has_key?(:'LastRemindDate')
        self.last_remind_date = attributes[:'LastRemindDate']
      end

      if attributes.has_key?(:'Net')
        self.net = attributes[:'Net']
      end

      if attributes.has_key?(:'NotCompleted')
        self.not_completed = attributes[:'NotCompleted']
      end

      if attributes.has_key?(:'NoxFinans')
        self.nox_finans = attributes[:'NoxFinans']
      end

      if attributes.has_key?(:'OCR')
        self.ocr = attributes[:'OCR']
      end

      if attributes.has_key?(:'OfferReference')
        self.offer_reference = attributes[:'OfferReference']
      end

      if attributes.has_key?(:'OrderReference')
        self.order_reference = attributes[:'OrderReference']
      end

      if attributes.has_key?(:'OrganisationNumber')
        self.organisation_number = attributes[:'OrganisationNumber']
      end

      if attributes.has_key?(:'OurReference')
        self.our_reference = attributes[:'OurReference']
      end

      if attributes.has_key?(:'PaymentWay')
        self.payment_way = attributes[:'PaymentWay']
      end

      if attributes.has_key?(:'Phone1')
        self.phone1 = attributes[:'Phone1']
      end

      if attributes.has_key?(:'Phone2')
        self.phone2 = attributes[:'Phone2']
      end

      if attributes.has_key?(:'PriceList')
        self.price_list = attributes[:'PriceList']
      end

      if attributes.has_key?(:'PrintTemplate')
        self.print_template = attributes[:'PrintTemplate']
      end

      if attributes.has_key?(:'Project')
        self.project = attributes[:'Project']
      end

      if attributes.has_key?(:'Remarks')
        self.remarks = attributes[:'Remarks']
      end

      if attributes.has_key?(:'Reminders')
        self.reminders = attributes[:'Reminders']
      end

      if attributes.has_key?(:'RoundOff')
        self.round_off = attributes[:'RoundOff']
      end

      if attributes.has_key?(:'Sent')
        self.sent = attributes[:'Sent']
      end

      if attributes.has_key?(:'TaxReduction')
        self.tax_reduction = attributes[:'TaxReduction']
      end

      if attributes.has_key?(:'TermsOfDelivery')
        self.terms_of_delivery = attributes[:'TermsOfDelivery']
      end

      if attributes.has_key?(:'TermsOfPayment')
        self.terms_of_payment = attributes[:'TermsOfPayment']
      end

      if attributes.has_key?(:'Total')
        self.total = attributes[:'Total']
      end

      if attributes.has_key?(:'TotalToPay')
        self.total_to_pay = attributes[:'TotalToPay']
      end

      if attributes.has_key?(:'TotalVAT')
        self.total_vat = attributes[:'TotalVAT']
      end

      if attributes.has_key?(:'VATIncluded')
        self.vat_included = attributes[:'VATIncluded']
      end

      if attributes.has_key?(:'VoucherNumber')
        self.voucher_number = attributes[:'VoucherNumber']
      end

      if attributes.has_key?(:'VoucherSeries')
        self.voucher_series = attributes[:'VoucherSeries']
      end

      if attributes.has_key?(:'VoucherYear')
        self.voucher_year = attributes[:'VoucherYear']
      end

      if attributes.has_key?(:'WayOfDelivery')
        self.way_of_delivery = attributes[:'WayOfDelivery']
      end

      if attributes.has_key?(:'YourOrderNumber')
        self.your_order_number = attributes[:'YourOrderNumber']
      end

      if attributes.has_key?(:'YourReference')
        self.your_reference = attributes[:'YourReference']
      end

      if attributes.has_key?(:'ZipCode')
        self.zip_code = attributes[:'ZipCode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@address1.nil? && @address1.to_s.length > 1024
        invalid_properties.push('invalid value for "address1", the character length must be smaller than or equal to 1024.')
      end

      if !@address2.nil? && @address2.to_s.length > 1024
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 1024.')
      end

      if !@city.nil? && @city.to_s.length > 1024
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 1024.')
      end

      if !@comments.nil? && @comments.to_s.length > 1024
        invalid_properties.push('invalid value for "comments", the character length must be smaller than or equal to 1024.')
      end

      if !@customer_name.nil? && @customer_name.to_s.length > 1024
        invalid_properties.push('invalid value for "customer_name", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_address1.nil? && @delivery_address1.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_address1", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_address2.nil? && @delivery_address2.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_address2", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_city.nil? && @delivery_city.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_city", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_name.nil? && @delivery_name.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_name", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_zip_code.nil? && @delivery_zip_code.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_zip_code", the character length must be smaller than or equal to 1024.')
      end

      if @document_number.nil?
        invalid_properties.push('invalid value for "document_number", document_number cannot be nil.')
      end

      if !@external_invoice_reference1.nil? && @external_invoice_reference1.to_s.length > 80
        invalid_properties.push('invalid value for "external_invoice_reference1", the character length must be smaller than or equal to 80.')
      end

      if !@external_invoice_reference2.nil? && @external_invoice_reference2.to_s.length > 80
        invalid_properties.push('invalid value for "external_invoice_reference2", the character length must be smaller than or equal to 80.')
      end

      if !@organisation_number.nil? && @organisation_number.to_s.length > 30
        invalid_properties.push('invalid value for "organisation_number", the character length must be smaller than or equal to 30.')
      end

      if !@our_reference.nil? && @our_reference.to_s.length > 50
        invalid_properties.push('invalid value for "our_reference", the character length must be smaller than or equal to 50.')
      end

      if !@payment_way.nil? && @payment_way.to_s.length > 50
        invalid_properties.push('invalid value for "payment_way", the character length must be smaller than or equal to 50.')
      end

      if !@phone1.nil? && @phone1.to_s.length > 1024
        invalid_properties.push('invalid value for "phone1", the character length must be smaller than or equal to 1024.')
      end

      if !@phone2.nil? && @phone2.to_s.length > 1024
        invalid_properties.push('invalid value for "phone2", the character length must be smaller than or equal to 1024.')
      end

      if !@remarks.nil? && @remarks.to_s.length > 1024
        invalid_properties.push('invalid value for "remarks", the character length must be smaller than or equal to 1024.')
      end

      if !@your_order_number.nil? && @your_order_number.to_s.length > 75
        invalid_properties.push('invalid value for "your_order_number", the character length must be smaller than or equal to 75.')
      end

      if !@your_reference.nil? && @your_reference.to_s.length > 50
        invalid_properties.push('invalid value for "your_reference", the character length must be smaller than or equal to 50.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 1024
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 1024.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@address1.nil? && @address1.to_s.length > 1024
      return false if !@address2.nil? && @address2.to_s.length > 1024
      return false if !@city.nil? && @city.to_s.length > 1024
      return false if !@comments.nil? && @comments.to_s.length > 1024
      return false if !@customer_name.nil? && @customer_name.to_s.length > 1024
      return false if !@delivery_address1.nil? && @delivery_address1.to_s.length > 1024
      return false if !@delivery_address2.nil? && @delivery_address2.to_s.length > 1024
      return false if !@delivery_city.nil? && @delivery_city.to_s.length > 1024
      return false if !@delivery_name.nil? && @delivery_name.to_s.length > 1024
      return false if !@delivery_zip_code.nil? && @delivery_zip_code.to_s.length > 1024
      return false if @document_number.nil?
      return false if !@external_invoice_reference1.nil? && @external_invoice_reference1.to_s.length > 80
      return false if !@external_invoice_reference2.nil? && @external_invoice_reference2.to_s.length > 80
      return false if !@organisation_number.nil? && @organisation_number.to_s.length > 30
      return false if !@our_reference.nil? && @our_reference.to_s.length > 50
      return false if !@payment_way.nil? && @payment_way.to_s.length > 50
      return false if !@phone1.nil? && @phone1.to_s.length > 1024
      return false if !@phone2.nil? && @phone2.to_s.length > 1024
      return false if !@remarks.nil? && @remarks.to_s.length > 1024
      return false if !@your_order_number.nil? && @your_order_number.to_s.length > 75
      return false if !@your_reference.nil? && @your_reference.to_s.length > 50
      return false if !@zip_code.nil? && @zip_code.to_s.length > 1024
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] address1 Value to be assigned
    def address1=(address1)
      if !address1.nil? && address1.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address1", the character length must be smaller than or equal to 1024.'
      end

      @address1 = address1
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 1024.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 1024
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 1024.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] comments Value to be assigned
    def comments=(comments)
      if !comments.nil? && comments.to_s.length > 1024
        fail ArgumentError, 'invalid value for "comments", the character length must be smaller than or equal to 1024.'
      end

      @comments = comments
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_name Value to be assigned
    def customer_name=(customer_name)
      if !customer_name.nil? && customer_name.to_s.length > 1024
        fail ArgumentError, 'invalid value for "customer_name", the character length must be smaller than or equal to 1024.'
      end

      @customer_name = customer_name
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_address1 Value to be assigned
    def delivery_address1=(delivery_address1)
      if !delivery_address1.nil? && delivery_address1.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_address1", the character length must be smaller than or equal to 1024.'
      end

      @delivery_address1 = delivery_address1
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_address2 Value to be assigned
    def delivery_address2=(delivery_address2)
      if !delivery_address2.nil? && delivery_address2.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_address2", the character length must be smaller than or equal to 1024.'
      end

      @delivery_address2 = delivery_address2
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_city Value to be assigned
    def delivery_city=(delivery_city)
      if !delivery_city.nil? && delivery_city.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_city", the character length must be smaller than or equal to 1024.'
      end

      @delivery_city = delivery_city
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_name Value to be assigned
    def delivery_name=(delivery_name)
      if !delivery_name.nil? && delivery_name.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_name", the character length must be smaller than or equal to 1024.'
      end

      @delivery_name = delivery_name
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_zip_code Value to be assigned
    def delivery_zip_code=(delivery_zip_code)
      if !delivery_zip_code.nil? && delivery_zip_code.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_zip_code", the character length must be smaller than or equal to 1024.'
      end

      @delivery_zip_code = delivery_zip_code
    end

    # Custom attribute writer method with validation
    # @param [Object] external_invoice_reference1 Value to be assigned
    def external_invoice_reference1=(external_invoice_reference1)
      if !external_invoice_reference1.nil? && external_invoice_reference1.to_s.length > 80
        fail ArgumentError, 'invalid value for "external_invoice_reference1", the character length must be smaller than or equal to 80.'
      end

      @external_invoice_reference1 = external_invoice_reference1
    end

    # Custom attribute writer method with validation
    # @param [Object] external_invoice_reference2 Value to be assigned
    def external_invoice_reference2=(external_invoice_reference2)
      if !external_invoice_reference2.nil? && external_invoice_reference2.to_s.length > 80
        fail ArgumentError, 'invalid value for "external_invoice_reference2", the character length must be smaller than or equal to 80.'
      end

      @external_invoice_reference2 = external_invoice_reference2
    end

    # Custom attribute writer method with validation
    # @param [Object] organisation_number Value to be assigned
    def organisation_number=(organisation_number)
      if !organisation_number.nil? && organisation_number.to_s.length > 30
        fail ArgumentError, 'invalid value for "organisation_number", the character length must be smaller than or equal to 30.'
      end

      @organisation_number = organisation_number
    end

    # Custom attribute writer method with validation
    # @param [Object] our_reference Value to be assigned
    def our_reference=(our_reference)
      if !our_reference.nil? && our_reference.to_s.length > 50
        fail ArgumentError, 'invalid value for "our_reference", the character length must be smaller than or equal to 50.'
      end

      @our_reference = our_reference
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_way Value to be assigned
    def payment_way=(payment_way)
      if !payment_way.nil? && payment_way.to_s.length > 50
        fail ArgumentError, 'invalid value for "payment_way", the character length must be smaller than or equal to 50.'
      end

      @payment_way = payment_way
    end

    # Custom attribute writer method with validation
    # @param [Object] phone1 Value to be assigned
    def phone1=(phone1)
      if !phone1.nil? && phone1.to_s.length > 1024
        fail ArgumentError, 'invalid value for "phone1", the character length must be smaller than or equal to 1024.'
      end

      @phone1 = phone1
    end

    # Custom attribute writer method with validation
    # @param [Object] phone2 Value to be assigned
    def phone2=(phone2)
      if !phone2.nil? && phone2.to_s.length > 1024
        fail ArgumentError, 'invalid value for "phone2", the character length must be smaller than or equal to 1024.'
      end

      @phone2 = phone2
    end

    # Custom attribute writer method with validation
    # @param [Object] remarks Value to be assigned
    def remarks=(remarks)
      if !remarks.nil? && remarks.to_s.length > 1024
        fail ArgumentError, 'invalid value for "remarks", the character length must be smaller than or equal to 1024.'
      end

      @remarks = remarks
    end

    # Custom attribute writer method with validation
    # @param [Object] your_order_number Value to be assigned
    def your_order_number=(your_order_number)
      if !your_order_number.nil? && your_order_number.to_s.length > 75
        fail ArgumentError, 'invalid value for "your_order_number", the character length must be smaller than or equal to 75.'
      end

      @your_order_number = your_order_number
    end

    # Custom attribute writer method with validation
    # @param [Object] your_reference Value to be assigned
    def your_reference=(your_reference)
      if !your_reference.nil? && your_reference.to_s.length > 50
        fail ArgumentError, 'invalid value for "your_reference", the character length must be smaller than or equal to 50.'
      end

      @your_reference = your_reference
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 1024
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 1024.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          url_tax_reduction_list == o.url_tax_reduction_list &&
          address1 == o.address1 &&
          address2 == o.address2 &&
          administration_fee == o.administration_fee &&
          administration_fee_vat == o.administration_fee_vat &&
          balance == o.balance &&
          basis_tax_reduction == o.basis_tax_reduction &&
          booked == o.booked &&
          cancelled == o.cancelled &&
          city == o.city &&
          comments == o.comments &&
          contract_reference == o.contract_reference &&
          contribution_percent == o.contribution_percent &&
          contribution_value == o.contribution_value &&
          cost_center == o.cost_center &&
          country == o.country &&
          credit == o.credit &&
          credit_invoice_reference == o.credit_invoice_reference &&
          currency == o.currency &&
          currency_rate == o.currency_rate &&
          currency_unit == o.currency_unit &&
          customer_name == o.customer_name &&
          customer_number == o.customer_number &&
          delivery_address1 == o.delivery_address1 &&
          delivery_address2 == o.delivery_address2 &&
          delivery_city == o.delivery_city &&
          delivery_country == o.delivery_country &&
          delivery_date == o.delivery_date &&
          delivery_name == o.delivery_name &&
          delivery_zip_code == o.delivery_zip_code &&
          document_number == o.document_number &&
          due_date == o.due_date &&
          edi_information == o.edi_information &&
          eu_quarterly_report == o.eu_quarterly_report &&
          email_information == o.email_information &&
          external_invoice_reference1 == o.external_invoice_reference1 &&
          external_invoice_reference2 == o.external_invoice_reference2 &&
          freight == o.freight &&
          freight_vat == o.freight_vat &&
          gross == o.gross &&
          house_work == o.house_work &&
          invoice_date == o.invoice_date &&
          invoice_period_start == o.invoice_period_start &&
          invoice_period_end == o.invoice_period_end &&
          invoice_reference == o.invoice_reference &&
          invoice_rows == o.invoice_rows &&
          invoice_type == o.invoice_type &&
          labels == o.labels &&
          language == o.language &&
          last_remind_date == o.last_remind_date &&
          net == o.net &&
          not_completed == o.not_completed &&
          nox_finans == o.nox_finans &&
          ocr == o.ocr &&
          offer_reference == o.offer_reference &&
          order_reference == o.order_reference &&
          organisation_number == o.organisation_number &&
          our_reference == o.our_reference &&
          payment_way == o.payment_way &&
          phone1 == o.phone1 &&
          phone2 == o.phone2 &&
          price_list == o.price_list &&
          print_template == o.print_template &&
          project == o.project &&
          remarks == o.remarks &&
          reminders == o.reminders &&
          round_off == o.round_off &&
          sent == o.sent &&
          tax_reduction == o.tax_reduction &&
          terms_of_delivery == o.terms_of_delivery &&
          terms_of_payment == o.terms_of_payment &&
          total == o.total &&
          total_to_pay == o.total_to_pay &&
          total_vat == o.total_vat &&
          vat_included == o.vat_included &&
          voucher_number == o.voucher_number &&
          voucher_series == o.voucher_series &&
          voucher_year == o.voucher_year &&
          way_of_delivery == o.way_of_delivery &&
          your_order_number == o.your_order_number &&
          your_reference == o.your_reference &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [url, url_tax_reduction_list, address1, address2, administration_fee, administration_fee_vat, balance, basis_tax_reduction, booked, cancelled, city, comments, contract_reference, contribution_percent, contribution_value, cost_center, country, credit, credit_invoice_reference, currency, currency_rate, currency_unit, customer_name, customer_number, delivery_address1, delivery_address2, delivery_city, delivery_country, delivery_date, delivery_name, delivery_zip_code, document_number, due_date, edi_information, eu_quarterly_report, email_information, external_invoice_reference1, external_invoice_reference2, freight, freight_vat, gross, house_work, invoice_date, invoice_period_start, invoice_period_end, invoice_reference, invoice_rows, invoice_type, labels, language, last_remind_date, net, not_completed, nox_finans, ocr, offer_reference, order_reference, organisation_number, our_reference, payment_way, phone1, phone2, price_list, print_template, project, remarks, reminders, round_off, sent, tax_reduction, terms_of_delivery, terms_of_payment, total, total_to_pay, total_vat, vat_included, voucher_number, voucher_series, voucher_year, way_of_delivery, your_order_number, your_reference, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = StandoutFortnox.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
