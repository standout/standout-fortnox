=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.23
=end

require 'date'

module StandoutFortnox
  class VoucherVoucher
    # Direct URL to the record.
    attr_accessor :url

    # Comments of the voucher.
    attr_accessor :comments

    # Code of the cost center. The code must be of an existing cost center.
    attr_accessor :cost_center

    # Description of the voucher.
    attr_accessor :description

    # Code of the project. The code must be of an existing project.
    attr_accessor :project

    # Reference number, for example an invoice number.
    attr_accessor :reference_number

    # Reference type. Can be INVOICE SUPPLIERINVOICE INVOICEPAYMENT SUPPLIERPAYMENT MANUAL CASHINVOICE or ACCRUAL
    attr_accessor :reference_type

    # Date of the transaction. Must be a valid date according to our date format.
    attr_accessor :transaction_date

    # Number of the voucher
    attr_accessor :voucher_number

    # Code of the voucher series. The code must be of an existing voucher series.
    attr_accessor :voucher_series

    # Id of the year of the voucher.
    attr_accessor :year

    # The approval state f the voucher. Not for approval: 0 Not ready for approval: 1 Not approved: 2 Approved: 3
    attr_accessor :approval_state

    attr_accessor :voucher_rows

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'@url',
        :'comments' => :'Comments',
        :'cost_center' => :'CostCenter',
        :'description' => :'Description',
        :'project' => :'Project',
        :'reference_number' => :'ReferenceNumber',
        :'reference_type' => :'ReferenceType',
        :'transaction_date' => :'TransactionDate',
        :'voucher_number' => :'VoucherNumber',
        :'voucher_series' => :'VoucherSeries',
        :'year' => :'Year',
        :'approval_state' => :'ApprovalState',
        :'voucher_rows' => :'VoucherRows'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'url' => :'Object',
        :'comments' => :'Object',
        :'cost_center' => :'Object',
        :'description' => :'Object',
        :'project' => :'Object',
        :'reference_number' => :'Object',
        :'reference_type' => :'Object',
        :'transaction_date' => :'Object',
        :'voucher_number' => :'Object',
        :'voucher_series' => :'Object',
        :'year' => :'Object',
        :'approval_state' => :'Object',
        :'voucher_rows' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `StandoutFortnox::VoucherVoucher` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `StandoutFortnox::VoucherVoucher`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'cost_center')
        self.cost_center = attributes[:'cost_center']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'reference_number')
        self.reference_number = attributes[:'reference_number']
      end

      if attributes.key?(:'reference_type')
        self.reference_type = attributes[:'reference_type']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end

      if attributes.key?(:'voucher_number')
        self.voucher_number = attributes[:'voucher_number']
      end

      if attributes.key?(:'voucher_series')
        self.voucher_series = attributes[:'voucher_series']
      end

      if attributes.key?(:'year')
        self.year = attributes[:'year']
      end

      if attributes.key?(:'approval_state')
        self.approval_state = attributes[:'approval_state']
      end

      if attributes.key?(:'voucher_rows')
        if (value = attributes[:'voucher_rows']).is_a?(Array)
          self.voucher_rows = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          comments == o.comments &&
          cost_center == o.cost_center &&
          description == o.description &&
          project == o.project &&
          reference_number == o.reference_number &&
          reference_type == o.reference_type &&
          transaction_date == o.transaction_date &&
          voucher_number == o.voucher_number &&
          voucher_series == o.voucher_series &&
          year == o.year &&
          approval_state == o.approval_state &&
          voucher_rows == o.voucher_rows
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [url, comments, cost_center, description, project, reference_number, reference_type, transaction_date, voucher_number, voucher_series, year, approval_state, voucher_rows].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        StandoutFortnox.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
