=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.20

=end

require 'date'

module StandoutFortnox
  class VoucherVoucher
    # Direct URL to the record.
    attr_accessor :url

    # Comments of the voucher.
    attr_accessor :comments

    # Code of the cost center. The code must be of an existing cost center.
    attr_accessor :cost_center

    # Description of the voucher.
    attr_accessor :description

    # Code of the project. The code must be of an existing project.
    attr_accessor :project

    # Reference number, for example an invoice number.
    attr_accessor :reference_number

    # Reference type. Can be INVOICE SUPPLIERINVOICE INVOICEPAYMENT SUPPLIERPAYMENT MANUAL CASHINVOICE or ACCRUAL
    attr_accessor :reference_type

    # Date of the transaction. Must be a valid date according to our date format.
    attr_accessor :transaction_date

    # Number of the voucher
    attr_accessor :voucher_number

    # Code of the voucher series. The code must be of an existing voucher series.
    attr_accessor :voucher_series

    # Id of the year of the voucher.
    attr_accessor :year

    # The approval state f the voucher. Not for approval: 0 Not ready for approval: 1 Not approved: 2 Approved: 3
    attr_accessor :approval_state

    attr_accessor :voucher_rows

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'@url',
        :'comments' => :'Comments',
        :'cost_center' => :'CostCenter',
        :'description' => :'Description',
        :'project' => :'Project',
        :'reference_number' => :'ReferenceNumber',
        :'reference_type' => :'ReferenceType',
        :'transaction_date' => :'TransactionDate',
        :'voucher_number' => :'VoucherNumber',
        :'voucher_series' => :'VoucherSeries',
        :'year' => :'Year',
        :'approval_state' => :'ApprovalState',
        :'voucher_rows' => :'VoucherRows'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'url' => :'String',
        :'comments' => :'String',
        :'cost_center' => :'String',
        :'description' => :'String',
        :'project' => :'String',
        :'reference_number' => :'String',
        :'reference_type' => :'String',
        :'transaction_date' => :'Date',
        :'voucher_number' => :'Integer',
        :'voucher_series' => :'String',
        :'year' => :'Integer',
        :'approval_state' => :'Integer',
        :'voucher_rows' => :'Array<VoucherVoucherVoucherRows>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'@url')
        self.url = attributes[:'@url']
      end

      if attributes.has_key?(:'Comments')
        self.comments = attributes[:'Comments']
      end

      if attributes.has_key?(:'CostCenter')
        self.cost_center = attributes[:'CostCenter']
      end

      if attributes.has_key?(:'Description')
        self.description = attributes[:'Description']
      end

      if attributes.has_key?(:'Project')
        self.project = attributes[:'Project']
      end

      if attributes.has_key?(:'ReferenceNumber')
        self.reference_number = attributes[:'ReferenceNumber']
      end

      if attributes.has_key?(:'ReferenceType')
        self.reference_type = attributes[:'ReferenceType']
      end

      if attributes.has_key?(:'TransactionDate')
        self.transaction_date = attributes[:'TransactionDate']
      end

      if attributes.has_key?(:'VoucherNumber')
        self.voucher_number = attributes[:'VoucherNumber']
      end

      if attributes.has_key?(:'VoucherSeries')
        self.voucher_series = attributes[:'VoucherSeries']
      end

      if attributes.has_key?(:'Year')
        self.year = attributes[:'Year']
      end

      if attributes.has_key?(:'ApprovalState')
        self.approval_state = attributes[:'ApprovalState']
      end

      if attributes.has_key?(:'VoucherRows')
        if (value = attributes[:'VoucherRows']).is_a?(Array)
          self.voucher_rows = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@comments.nil? && @comments.to_s.length > 1000
        invalid_properties.push('invalid value for "comments", the character length must be smaller than or equal to 1000.')
      end

      if !@description.nil? && @description.to_s.length > 200
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 200.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@comments.nil? && @comments.to_s.length > 1000
      return false if !@description.nil? && @description.to_s.length > 200
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] comments Value to be assigned
    def comments=(comments)
      if !comments.nil? && comments.to_s.length > 1000
        fail ArgumentError, 'invalid value for "comments", the character length must be smaller than or equal to 1000.'
      end

      @comments = comments
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 200
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 200.'
      end

      @description = description
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          comments == o.comments &&
          cost_center == o.cost_center &&
          description == o.description &&
          project == o.project &&
          reference_number == o.reference_number &&
          reference_type == o.reference_type &&
          transaction_date == o.transaction_date &&
          voucher_number == o.voucher_number &&
          voucher_series == o.voucher_series &&
          year == o.year &&
          approval_state == o.approval_state &&
          voucher_rows == o.voucher_rows
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [url, comments, cost_center, description, project, reference_number, reference_type, transaction_date, voucher_number, voucher_series, year, approval_state, voucher_rows].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = StandoutFortnox.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
