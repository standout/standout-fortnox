=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.23
=end

require 'date'

module StandoutFortnox
  class InvoicePaymentInvoicePayment
    # Direct url to the record.
    attr_accessor :url

    # Amount of the payment
    attr_accessor :amount

    # Amount in the specified currency of the payment. Required if Currency is other than SEK
    attr_accessor :amount_currency

    # If the payment is booked or not
    attr_accessor :booked

    # Currency of the payment
    attr_accessor :currency

    # The currency rate
    attr_accessor :currency_rate

    # The currency unit
    attr_accessor :currency_unit

    # External invoice reference
    attr_accessor :external_invoice_reference1

    # External invoice reference
    attr_accessor :external_invoice_reference2

    # Customer name of the invoice
    attr_accessor :invoice_customer_name

    # Customer number of the invoice
    attr_accessor :invoice_customer_number

    # Invoice number
    attr_accessor :invoice_number

    # Due date of the invoice
    attr_accessor :invoice_due_date

    # OCR of the invoice
    attr_accessor :invoice_ocr

    # Invoice total
    attr_accessor :invoice_total

    # Code of the mode of payment
    attr_accessor :mode_of_payment

    # Account for the mode of payment
    attr_accessor :mode_of_payment_account

    # Payment number
    attr_accessor :number

    # Date of the payment
    attr_accessor :payment_date

    # Number of the voucher
    attr_accessor :voucher_number

    # Series of the voucher
    attr_accessor :voucher_series

    # Id of the voucher year
    attr_accessor :voucher_year

    # Payment source manual / direct
    attr_accessor :source

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'@url',
        :'amount' => :'Amount',
        :'amount_currency' => :'AmountCurrency',
        :'booked' => :'Booked',
        :'currency' => :'Currency',
        :'currency_rate' => :'CurrencyRate',
        :'currency_unit' => :'CurrencyUnit',
        :'external_invoice_reference1' => :'ExternalInvoiceReference1',
        :'external_invoice_reference2' => :'ExternalInvoiceReference2',
        :'invoice_customer_name' => :'InvoiceCustomerName',
        :'invoice_customer_number' => :'InvoiceCustomerNumber',
        :'invoice_number' => :'InvoiceNumber',
        :'invoice_due_date' => :'InvoiceDueDate',
        :'invoice_ocr' => :'InvoiceOCR',
        :'invoice_total' => :'InvoiceTotal',
        :'mode_of_payment' => :'ModeOfPayment',
        :'mode_of_payment_account' => :'ModeOfPaymentAccount',
        :'number' => :'Number',
        :'payment_date' => :'PaymentDate',
        :'voucher_number' => :'VoucherNumber',
        :'voucher_series' => :'VoucherSeries',
        :'voucher_year' => :'VoucherYear',
        :'source' => :'Source'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'url' => :'Object',
        :'amount' => :'Object',
        :'amount_currency' => :'Object',
        :'booked' => :'Object',
        :'currency' => :'Object',
        :'currency_rate' => :'Object',
        :'currency_unit' => :'Object',
        :'external_invoice_reference1' => :'Object',
        :'external_invoice_reference2' => :'Object',
        :'invoice_customer_name' => :'Object',
        :'invoice_customer_number' => :'Object',
        :'invoice_number' => :'Object',
        :'invoice_due_date' => :'Object',
        :'invoice_ocr' => :'Object',
        :'invoice_total' => :'Object',
        :'mode_of_payment' => :'Object',
        :'mode_of_payment_account' => :'Object',
        :'number' => :'Object',
        :'payment_date' => :'Object',
        :'voucher_number' => :'Object',
        :'voucher_series' => :'Object',
        :'voucher_year' => :'Object',
        :'source' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `StandoutFortnox::InvoicePaymentInvoicePayment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `StandoutFortnox::InvoicePaymentInvoicePayment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'amount_currency')
        self.amount_currency = attributes[:'amount_currency']
      end

      if attributes.key?(:'booked')
        self.booked = attributes[:'booked']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'currency_rate')
        self.currency_rate = attributes[:'currency_rate']
      end

      if attributes.key?(:'currency_unit')
        self.currency_unit = attributes[:'currency_unit']
      end

      if attributes.key?(:'external_invoice_reference1')
        self.external_invoice_reference1 = attributes[:'external_invoice_reference1']
      end

      if attributes.key?(:'external_invoice_reference2')
        self.external_invoice_reference2 = attributes[:'external_invoice_reference2']
      end

      if attributes.key?(:'invoice_customer_name')
        self.invoice_customer_name = attributes[:'invoice_customer_name']
      end

      if attributes.key?(:'invoice_customer_number')
        self.invoice_customer_number = attributes[:'invoice_customer_number']
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.key?(:'invoice_due_date')
        self.invoice_due_date = attributes[:'invoice_due_date']
      end

      if attributes.key?(:'invoice_ocr')
        self.invoice_ocr = attributes[:'invoice_ocr']
      end

      if attributes.key?(:'invoice_total')
        self.invoice_total = attributes[:'invoice_total']
      end

      if attributes.key?(:'mode_of_payment')
        self.mode_of_payment = attributes[:'mode_of_payment']
      end

      if attributes.key?(:'mode_of_payment_account')
        self.mode_of_payment_account = attributes[:'mode_of_payment_account']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end

      if attributes.key?(:'voucher_number')
        self.voucher_number = attributes[:'voucher_number']
      end

      if attributes.key?(:'voucher_series')
        self.voucher_series = attributes[:'voucher_series']
      end

      if attributes.key?(:'voucher_year')
        self.voucher_year = attributes[:'voucher_year']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          amount == o.amount &&
          amount_currency == o.amount_currency &&
          booked == o.booked &&
          currency == o.currency &&
          currency_rate == o.currency_rate &&
          currency_unit == o.currency_unit &&
          external_invoice_reference1 == o.external_invoice_reference1 &&
          external_invoice_reference2 == o.external_invoice_reference2 &&
          invoice_customer_name == o.invoice_customer_name &&
          invoice_customer_number == o.invoice_customer_number &&
          invoice_number == o.invoice_number &&
          invoice_due_date == o.invoice_due_date &&
          invoice_ocr == o.invoice_ocr &&
          invoice_total == o.invoice_total &&
          mode_of_payment == o.mode_of_payment &&
          mode_of_payment_account == o.mode_of_payment_account &&
          number == o.number &&
          payment_date == o.payment_date &&
          voucher_number == o.voucher_number &&
          voucher_series == o.voucher_series &&
          voucher_year == o.voucher_year &&
          source == o.source
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [url, amount, amount_currency, booked, currency, currency_rate, currency_unit, external_invoice_reference1, external_invoice_reference2, invoice_customer_name, invoice_customer_number, invoice_number, invoice_due_date, invoice_ocr, invoice_total, mode_of_payment, mode_of_payment_account, number, payment_date, voucher_number, voucher_series, voucher_year, source].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        StandoutFortnox.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
