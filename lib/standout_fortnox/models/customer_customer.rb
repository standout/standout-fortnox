=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.23
=end

require 'date'

module StandoutFortnox
  class CustomerCustomer
    # Direct URL to the record.
    attr_accessor :url

    # If the customer is active or not.
    attr_accessor :active

    # Address 1 of the customer.
    attr_accessor :address1

    # Address 2 of the customer.
    attr_accessor :address2

    # City of the customer.
    attr_accessor :city

    # Comments of the customer.
    attr_accessor :comments

    # Code of the cost center for the customer. The code must be of a an existing currency.
    attr_accessor :cost_center

    # Country name for the customer.
    attr_accessor :country

    # Code of the country for the customer. The code must be of an existing country according to ISO 3166-1 Alpha-2.
    attr_accessor :country_code

    # Code of the currency for the customer. This will be used as the predefined currency for documents for the customer. The code must be of an existing currency.
    attr_accessor :currency

    # CCustomer number of the customer. If no customer number is provided, the next number in the series will be used. Only alpha numeric characters, with the addition of â€“ + / and _, are allowed.
    attr_accessor :customer_number

    attr_accessor :default_delivery_types

    attr_accessor :default_templates

    # Delivery address 1 for the customer.
    attr_accessor :delivery_address1

    # Delivery address 2 for the customer.
    attr_accessor :delivery_address2

    # Delivery city for the customer.
    attr_accessor :delivery_city

    # Delivery country for the customer.
    attr_accessor :delivery_country

    # Code of the delivery country for the customer. The code must be of an existing country according to ISO 3166-1 Alpha-2.
    attr_accessor :delivery_country_code

    # Delivery fax number of the customer
    attr_accessor :delivery_fax

    # Delivery name for the customer.
    attr_accessor :delivery_name

    # Delivery phone number 1 for the customer.
    attr_accessor :delivery_phone1

    # Delivery phone number 2 for the customer.
    attr_accessor :delivery_phone2

    # Delivery zip code for the customer.
    attr_accessor :delivery_zip_code

    # Email address of the customer. This must be a valid email address.
    attr_accessor :email

    # Specific email address used for invoices sent to the customer. This must be a valid email address.
    attr_accessor :email_invoice

    # Specific blind carbon copy email address used for invoices sent to the customer. This must be a valid email address.
    attr_accessor :email_invoice_bcc

    # Specific carbon copy email address used for invoices sent to the customer. This must be a valid email address.
    attr_accessor :email_invoice_cc

    # Specific email address used for offers sent to the customer. This must be a valid email address.
    attr_accessor :email_offer

    # Specific blind carbon copy email address used for offers sent to the customer. This must be a valid email address.
    attr_accessor :email_offer_bcc

    # Specific carbon copy email address used for offers sent to the customer. This must be a valid email address.
    attr_accessor :email_offer_cc

    # Specific email address used for orders sent to the customer. This must be a valid email address.
    attr_accessor :email_order

    # Specific blind carbon copy email address used for orders sent to the customer. This must be a valid email address.
    attr_accessor :email_order_bcc

    # Specific carbon copy email address used for orders sent to the customer. This must be a valid email address.
    attr_accessor :email_order_cc

    # ?
    attr_accessor :external_reference

    # Fax number for the customer
    attr_accessor :fax

    # Global Location Number of the customer
    attr_accessor :gln

    # Global Location Delivery Number
    attr_accessor :gln_delivery

    # Predefined invoice remark for the customer.
    attr_accessor :invoice_remark

    # Name of the customer.
    attr_accessor :name

    # Organisation number of the customer. It needs to be a valid organisation number.
    attr_accessor :organisation_number

    # Our reference of the customer.
    attr_accessor :our_reference

    # Phone number 1 of the customer.
    attr_accessor :phone1

    # Phone number 2 of the customer.
    attr_accessor :phone2

    # Code of the price list for the customer. The code must be of a an existing price list.
    attr_accessor :price_list

    # Number of the project for the customer. The number must be of a an existing project.
    attr_accessor :project

    # Predefined sales account of the customer.
    attr_accessor :sales_account

    # If prices should be displayed with VAT included.
    attr_accessor :show_price_vat_included

    # Code of the terms of delivery for the customer. The code must be of a an existing terms of delivery.
    attr_accessor :terms_of_delivery

    # Code of the terms of payment for the customer. The code must be of a an existing terms of payment.
    attr_accessor :terms_of_payment

    # Type of the customer. Can be PRIVATE or COMPANY.
    attr_accessor :type

    # VAT number for the customer.
    attr_accessor :vat_number

    # VAT type of the customer. Can be SEVAT SEREVERSEDVAT EUREVERSEDVAT EUVAT or EXPORT.
    attr_accessor :vat_type

    # Visiting address of the customer.
    attr_accessor :visiting_address

    # Visiting city of the customer.
    attr_accessor :visiting_city

    # Visiting country of the customer.
    attr_accessor :visiting_country

    # Code of the visiting country for the customer. The code must be of an existing country according to ISO 3166-1 Alpha-2.
    attr_accessor :visiting_country_code

    # Visiting zip code of the customer.
    attr_accessor :visiting_zip_code

    # Website of the customer.
    attr_accessor :www

    # Code of the way of delivery for the customer. The code must be of a an existing way of delivery.
    attr_accessor :way_of_delivery

    # Your reference of the customer.
    attr_accessor :your_reference

    # Zip code of the customers.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'@url',
        :'active' => :'Active',
        :'address1' => :'Address1',
        :'address2' => :'Address2',
        :'city' => :'City',
        :'comments' => :'Comments',
        :'cost_center' => :'CostCenter',
        :'country' => :'Country',
        :'country_code' => :'CountryCode',
        :'currency' => :'Currency',
        :'customer_number' => :'CustomerNumber',
        :'default_delivery_types' => :'DefaultDeliveryTypes',
        :'default_templates' => :'DefaultTemplates',
        :'delivery_address1' => :'DeliveryAddress1',
        :'delivery_address2' => :'DeliveryAddress2',
        :'delivery_city' => :'DeliveryCity',
        :'delivery_country' => :'DeliveryCountry',
        :'delivery_country_code' => :'DeliveryCountryCode',
        :'delivery_fax' => :'DeliveryFax',
        :'delivery_name' => :'DeliveryName',
        :'delivery_phone1' => :'DeliveryPhone1',
        :'delivery_phone2' => :'DeliveryPhone2',
        :'delivery_zip_code' => :'DeliveryZipCode',
        :'email' => :'Email',
        :'email_invoice' => :'EmailInvoice',
        :'email_invoice_bcc' => :'EmailInvoiceBCC',
        :'email_invoice_cc' => :'EmailInvoiceCC',
        :'email_offer' => :'EmailOffer',
        :'email_offer_bcc' => :'EmailOfferBCC',
        :'email_offer_cc' => :'EmailOfferCC',
        :'email_order' => :'EmailOrder',
        :'email_order_bcc' => :'EmailOrderBCC',
        :'email_order_cc' => :'EmailOrderCC',
        :'external_reference' => :'ExternalReference',
        :'fax' => :'Fax',
        :'gln' => :'GLN',
        :'gln_delivery' => :'GLNDelivery',
        :'invoice_remark' => :'InvoiceRemark',
        :'name' => :'Name',
        :'organisation_number' => :'OrganisationNumber',
        :'our_reference' => :'OurReference',
        :'phone1' => :'Phone1',
        :'phone2' => :'Phone2',
        :'price_list' => :'PriceList',
        :'project' => :'Project',
        :'sales_account' => :'SalesAccount',
        :'show_price_vat_included' => :'ShowPriceVATIncluded',
        :'terms_of_delivery' => :'TermsOfDelivery',
        :'terms_of_payment' => :'TermsOfPayment',
        :'type' => :'Type',
        :'vat_number' => :'VATNumber',
        :'vat_type' => :'VATType',
        :'visiting_address' => :'VisitingAddress',
        :'visiting_city' => :'VisitingCity',
        :'visiting_country' => :'VisitingCountry',
        :'visiting_country_code' => :'VisitingCountryCode',
        :'visiting_zip_code' => :'VisitingZipCode',
        :'www' => :'WWW',
        :'way_of_delivery' => :'WayOfDelivery',
        :'your_reference' => :'YourReference',
        :'zip_code' => :'ZipCode'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'url' => :'Object',
        :'active' => :'Object',
        :'address1' => :'Object',
        :'address2' => :'Object',
        :'city' => :'Object',
        :'comments' => :'Object',
        :'cost_center' => :'Object',
        :'country' => :'Object',
        :'country_code' => :'Object',
        :'currency' => :'Object',
        :'customer_number' => :'Object',
        :'default_delivery_types' => :'Object',
        :'default_templates' => :'Object',
        :'delivery_address1' => :'Object',
        :'delivery_address2' => :'Object',
        :'delivery_city' => :'Object',
        :'delivery_country' => :'Object',
        :'delivery_country_code' => :'Object',
        :'delivery_fax' => :'Object',
        :'delivery_name' => :'Object',
        :'delivery_phone1' => :'Object',
        :'delivery_phone2' => :'Object',
        :'delivery_zip_code' => :'Object',
        :'email' => :'Object',
        :'email_invoice' => :'Object',
        :'email_invoice_bcc' => :'Object',
        :'email_invoice_cc' => :'Object',
        :'email_offer' => :'Object',
        :'email_offer_bcc' => :'Object',
        :'email_offer_cc' => :'Object',
        :'email_order' => :'Object',
        :'email_order_bcc' => :'Object',
        :'email_order_cc' => :'Object',
        :'external_reference' => :'Object',
        :'fax' => :'Object',
        :'gln' => :'Object',
        :'gln_delivery' => :'Object',
        :'invoice_remark' => :'Object',
        :'name' => :'Object',
        :'organisation_number' => :'Object',
        :'our_reference' => :'Object',
        :'phone1' => :'Object',
        :'phone2' => :'Object',
        :'price_list' => :'Object',
        :'project' => :'Object',
        :'sales_account' => :'Object',
        :'show_price_vat_included' => :'Object',
        :'terms_of_delivery' => :'Object',
        :'terms_of_payment' => :'Object',
        :'type' => :'Object',
        :'vat_number' => :'Object',
        :'vat_type' => :'Object',
        :'visiting_address' => :'Object',
        :'visiting_city' => :'Object',
        :'visiting_country' => :'Object',
        :'visiting_country_code' => :'Object',
        :'visiting_zip_code' => :'Object',
        :'www' => :'Object',
        :'way_of_delivery' => :'Object',
        :'your_reference' => :'Object',
        :'zip_code' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `StandoutFortnox::CustomerCustomer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `StandoutFortnox::CustomerCustomer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'address1')
        self.address1 = attributes[:'address1']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'cost_center')
        self.cost_center = attributes[:'cost_center']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'customer_number')
        self.customer_number = attributes[:'customer_number']
      end

      if attributes.key?(:'default_delivery_types')
        self.default_delivery_types = attributes[:'default_delivery_types']
      end

      if attributes.key?(:'default_templates')
        self.default_templates = attributes[:'default_templates']
      end

      if attributes.key?(:'delivery_address1')
        self.delivery_address1 = attributes[:'delivery_address1']
      end

      if attributes.key?(:'delivery_address2')
        self.delivery_address2 = attributes[:'delivery_address2']
      end

      if attributes.key?(:'delivery_city')
        self.delivery_city = attributes[:'delivery_city']
      end

      if attributes.key?(:'delivery_country')
        self.delivery_country = attributes[:'delivery_country']
      end

      if attributes.key?(:'delivery_country_code')
        self.delivery_country_code = attributes[:'delivery_country_code']
      end

      if attributes.key?(:'delivery_fax')
        self.delivery_fax = attributes[:'delivery_fax']
      end

      if attributes.key?(:'delivery_name')
        self.delivery_name = attributes[:'delivery_name']
      end

      if attributes.key?(:'delivery_phone1')
        self.delivery_phone1 = attributes[:'delivery_phone1']
      end

      if attributes.key?(:'delivery_phone2')
        self.delivery_phone2 = attributes[:'delivery_phone2']
      end

      if attributes.key?(:'delivery_zip_code')
        self.delivery_zip_code = attributes[:'delivery_zip_code']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'email_invoice')
        self.email_invoice = attributes[:'email_invoice']
      end

      if attributes.key?(:'email_invoice_bcc')
        self.email_invoice_bcc = attributes[:'email_invoice_bcc']
      end

      if attributes.key?(:'email_invoice_cc')
        self.email_invoice_cc = attributes[:'email_invoice_cc']
      end

      if attributes.key?(:'email_offer')
        self.email_offer = attributes[:'email_offer']
      end

      if attributes.key?(:'email_offer_bcc')
        self.email_offer_bcc = attributes[:'email_offer_bcc']
      end

      if attributes.key?(:'email_offer_cc')
        self.email_offer_cc = attributes[:'email_offer_cc']
      end

      if attributes.key?(:'email_order')
        self.email_order = attributes[:'email_order']
      end

      if attributes.key?(:'email_order_bcc')
        self.email_order_bcc = attributes[:'email_order_bcc']
      end

      if attributes.key?(:'email_order_cc')
        self.email_order_cc = attributes[:'email_order_cc']
      end

      if attributes.key?(:'external_reference')
        self.external_reference = attributes[:'external_reference']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'gln')
        self.gln = attributes[:'gln']
      end

      if attributes.key?(:'gln_delivery')
        self.gln_delivery = attributes[:'gln_delivery']
      end

      if attributes.key?(:'invoice_remark')
        self.invoice_remark = attributes[:'invoice_remark']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'organisation_number')
        self.organisation_number = attributes[:'organisation_number']
      end

      if attributes.key?(:'our_reference')
        self.our_reference = attributes[:'our_reference']
      end

      if attributes.key?(:'phone1')
        self.phone1 = attributes[:'phone1']
      end

      if attributes.key?(:'phone2')
        self.phone2 = attributes[:'phone2']
      end

      if attributes.key?(:'price_list')
        self.price_list = attributes[:'price_list']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'sales_account')
        self.sales_account = attributes[:'sales_account']
      end

      if attributes.key?(:'show_price_vat_included')
        self.show_price_vat_included = attributes[:'show_price_vat_included']
      end

      if attributes.key?(:'terms_of_delivery')
        self.terms_of_delivery = attributes[:'terms_of_delivery']
      end

      if attributes.key?(:'terms_of_payment')
        self.terms_of_payment = attributes[:'terms_of_payment']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'vat_number')
        self.vat_number = attributes[:'vat_number']
      end

      if attributes.key?(:'vat_type')
        self.vat_type = attributes[:'vat_type']
      end

      if attributes.key?(:'visiting_address')
        self.visiting_address = attributes[:'visiting_address']
      end

      if attributes.key?(:'visiting_city')
        self.visiting_city = attributes[:'visiting_city']
      end

      if attributes.key?(:'visiting_country')
        self.visiting_country = attributes[:'visiting_country']
      end

      if attributes.key?(:'visiting_country_code')
        self.visiting_country_code = attributes[:'visiting_country_code']
      end

      if attributes.key?(:'visiting_zip_code')
        self.visiting_zip_code = attributes[:'visiting_zip_code']
      end

      if attributes.key?(:'www')
        self.www = attributes[:'www']
      end

      if attributes.key?(:'way_of_delivery')
        self.way_of_delivery = attributes[:'way_of_delivery']
      end

      if attributes.key?(:'your_reference')
        self.your_reference = attributes[:'your_reference']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          active == o.active &&
          address1 == o.address1 &&
          address2 == o.address2 &&
          city == o.city &&
          comments == o.comments &&
          cost_center == o.cost_center &&
          country == o.country &&
          country_code == o.country_code &&
          currency == o.currency &&
          customer_number == o.customer_number &&
          default_delivery_types == o.default_delivery_types &&
          default_templates == o.default_templates &&
          delivery_address1 == o.delivery_address1 &&
          delivery_address2 == o.delivery_address2 &&
          delivery_city == o.delivery_city &&
          delivery_country == o.delivery_country &&
          delivery_country_code == o.delivery_country_code &&
          delivery_fax == o.delivery_fax &&
          delivery_name == o.delivery_name &&
          delivery_phone1 == o.delivery_phone1 &&
          delivery_phone2 == o.delivery_phone2 &&
          delivery_zip_code == o.delivery_zip_code &&
          email == o.email &&
          email_invoice == o.email_invoice &&
          email_invoice_bcc == o.email_invoice_bcc &&
          email_invoice_cc == o.email_invoice_cc &&
          email_offer == o.email_offer &&
          email_offer_bcc == o.email_offer_bcc &&
          email_offer_cc == o.email_offer_cc &&
          email_order == o.email_order &&
          email_order_bcc == o.email_order_bcc &&
          email_order_cc == o.email_order_cc &&
          external_reference == o.external_reference &&
          fax == o.fax &&
          gln == o.gln &&
          gln_delivery == o.gln_delivery &&
          invoice_remark == o.invoice_remark &&
          name == o.name &&
          organisation_number == o.organisation_number &&
          our_reference == o.our_reference &&
          phone1 == o.phone1 &&
          phone2 == o.phone2 &&
          price_list == o.price_list &&
          project == o.project &&
          sales_account == o.sales_account &&
          show_price_vat_included == o.show_price_vat_included &&
          terms_of_delivery == o.terms_of_delivery &&
          terms_of_payment == o.terms_of_payment &&
          type == o.type &&
          vat_number == o.vat_number &&
          vat_type == o.vat_type &&
          visiting_address == o.visiting_address &&
          visiting_city == o.visiting_city &&
          visiting_country == o.visiting_country &&
          visiting_country_code == o.visiting_country_code &&
          visiting_zip_code == o.visiting_zip_code &&
          www == o.www &&
          way_of_delivery == o.way_of_delivery &&
          your_reference == o.your_reference &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [url, active, address1, address2, city, comments, cost_center, country, country_code, currency, customer_number, default_delivery_types, default_templates, delivery_address1, delivery_address2, delivery_city, delivery_country, delivery_country_code, delivery_fax, delivery_name, delivery_phone1, delivery_phone2, delivery_zip_code, email, email_invoice, email_invoice_bcc, email_invoice_cc, email_offer, email_offer_bcc, email_offer_cc, email_order, email_order_bcc, email_order_cc, external_reference, fax, gln, gln_delivery, invoice_remark, name, organisation_number, our_reference, phone1, phone2, price_list, project, sales_account, show_price_vat_included, terms_of_delivery, terms_of_payment, type, vat_number, vat_type, visiting_address, visiting_city, visiting_country, visiting_country_code, visiting_zip_code, www, way_of_delivery, your_reference, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        StandoutFortnox.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
