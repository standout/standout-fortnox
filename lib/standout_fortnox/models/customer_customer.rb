=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module StandoutFortnox
  class CustomerCustomer
    # Direct URL to the record.
    attr_accessor :url

    # If the customer is active or not.
    attr_accessor :active

    # Address 1 of the customer.
    attr_accessor :address1

    # Address 2 of the customer.
    attr_accessor :address2

    # City of the customer.
    attr_accessor :city

    # Comments of the customer.
    attr_accessor :comments

    # Code of the cost center for the customer. The code must be of a an existing currency.
    attr_accessor :cost_center

    # Country name for the customer.
    attr_accessor :country

    # Code of the country for the customer. The code must be of an existing country according to ISO 3166-1 Alpha-2.
    attr_accessor :country_code

    # Code of the currency for the customer. This will be used as the predefined currency for documents for the customer. The code must be of an existing currency.
    attr_accessor :currency

    # CCustomer number of the customer. If no customer number is provided, the next number in the series will be used. Only alpha numeric characters, with the addition of â€“ + / and _, are allowed.
    attr_accessor :customer_number

    attr_accessor :default_delivery_types

    attr_accessor :default_templates

    # Delivery address 1 for the customer.
    attr_accessor :delivery_address1

    # Delivery address 2 for the customer.
    attr_accessor :delivery_address2

    # Delivery city for the customer.
    attr_accessor :delivery_city

    # Delivery country for the customer.
    attr_accessor :delivery_country

    # Code of the delivery country for the customer. The code must be of an existing country according to ISO 3166-1 Alpha-2.
    attr_accessor :delivery_country_code

    # Delivery fax number of the customer
    attr_accessor :delivery_fax

    # Delivery name for the customer.
    attr_accessor :delivery_name

    # Delivery phone number 1 for the customer.
    attr_accessor :delivery_phone1

    # Delivery phone number 2 for the customer.
    attr_accessor :delivery_phone2

    # Delivery zip code for the customer.
    attr_accessor :delivery_zip_code

    # Email address of the customer. This must be a valid email address.
    attr_accessor :email

    # Specific email address used for invoices sent to the customer. This must be a valid email address.
    attr_accessor :email_invoice

    # Specific blind carbon copy email address used for invoices sent to the customer. This must be a valid email address.
    attr_accessor :email_invoice_bcc

    # Specific carbon copy email address used for invoices sent to the customer. This must be a valid email address.
    attr_accessor :email_invoice_cc

    # Specific email address used for offers sent to the customer. This must be a valid email address.
    attr_accessor :email_offer

    # Specific blind carbon copy email address used for offers sent to the customer. This must be a valid email address.
    attr_accessor :email_offer_bcc

    # Specific carbon copy email address used for offers sent to the customer. This must be a valid email address.
    attr_accessor :email_offer_cc

    # Specific email address used for orders sent to the customer. This must be a valid email address.
    attr_accessor :email_order

    # Specific blind carbon copy email address used for orders sent to the customer. This must be a valid email address.
    attr_accessor :email_order_bcc

    # Specific carbon copy email address used for orders sent to the customer. This must be a valid email address.
    attr_accessor :email_order_cc

    # ?
    attr_accessor :external_reference

    # Fax number for the customer
    attr_accessor :fax

    # Global Location Number of the customer
    attr_accessor :gln

    # Global Location Delivery Number
    attr_accessor :gln_delivery

    # Predefined invoice remark for the customer.
    attr_accessor :invoice_remark

    # Name of the customer.
    attr_accessor :name

    # Organisation number of the customer. It needs to be a valid organisation number.
    attr_accessor :organisation_number

    # Our reference of the customer.
    attr_accessor :our_reference

    # Phone number 1 of the customer.
    attr_accessor :phone1

    # Phone number 2 of the customer.
    attr_accessor :phone2

    # Code of the price list for the customer. The code must be of a an existing price list.
    attr_accessor :price_list

    # Number of the project for the customer. The number must be of a an existing project.
    attr_accessor :project

    # Predefined sales account of the customer.
    attr_accessor :sales_account

    # If prices should be displayed with VAT included.
    attr_accessor :show_price_vat_included

    # Code of the terms of delivery for the customer. The code must be of a an existing terms of delivery.
    attr_accessor :terms_of_delivery

    # Code of the terms of payment for the customer. The code must be of a an existing terms of payment.
    attr_accessor :terms_of_payment

    # Type of the customer. Can be PRIVATE or COMPANY.
    attr_accessor :type

    # VAT number for the customer.
    attr_accessor :vat_number

    # VAT type of the customer. Can be SEVAT SEREVERSEDVAT EUREVERSEDVAT EUVAT or EXPORT.
    attr_accessor :vat_type

    # Visiting address of the customer.
    attr_accessor :visiting_address

    # Visiting city of the customer.
    attr_accessor :visiting_city

    # Visiting country of the customer.
    attr_accessor :visiting_country

    # Code of the visiting country for the customer. The code must be of an existing country according to ISO 3166-1 Alpha-2.
    attr_accessor :visiting_country_code

    # Visiting zip code of the customer.
    attr_accessor :visiting_zip_code

    # Website of the customer.
    attr_accessor :www

    # Code of the way of delivery for the customer. The code must be of a an existing way of delivery.
    attr_accessor :way_of_delivery

    # Your reference of the customer.
    attr_accessor :your_reference

    # Zip code of the customers.
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'@url',
        :'active' => :'Active',
        :'address1' => :'Address1',
        :'address2' => :'Address2',
        :'city' => :'City',
        :'comments' => :'Comments',
        :'cost_center' => :'CostCenter',
        :'country' => :'Country',
        :'country_code' => :'CountryCode',
        :'currency' => :'Currency',
        :'customer_number' => :'CustomerNumber',
        :'default_delivery_types' => :'DefaultDeliveryTypes',
        :'default_templates' => :'DefaultTemplates',
        :'delivery_address1' => :'DeliveryAddress1',
        :'delivery_address2' => :'DeliveryAddress2',
        :'delivery_city' => :'DeliveryCity',
        :'delivery_country' => :'DeliveryCountry',
        :'delivery_country_code' => :'DeliveryCountryCode',
        :'delivery_fax' => :'DeliveryFax',
        :'delivery_name' => :'DeliveryName',
        :'delivery_phone1' => :'DeliveryPhone1',
        :'delivery_phone2' => :'DeliveryPhone2',
        :'delivery_zip_code' => :'DeliveryZipCode',
        :'email' => :'Email',
        :'email_invoice' => :'EmailInvoice',
        :'email_invoice_bcc' => :'EmailInvoiceBCC',
        :'email_invoice_cc' => :'EmailInvoiceCC',
        :'email_offer' => :'EmailOffer',
        :'email_offer_bcc' => :'EmailOfferBCC',
        :'email_offer_cc' => :'EmailOfferCC',
        :'email_order' => :'EmailOrder',
        :'email_order_bcc' => :'EmailOrderBCC',
        :'email_order_cc' => :'EmailOrderCC',
        :'external_reference' => :'ExternalReference',
        :'fax' => :'Fax',
        :'gln' => :'GLN',
        :'gln_delivery' => :'GLNDelivery',
        :'invoice_remark' => :'InvoiceRemark',
        :'name' => :'Name',
        :'organisation_number' => :'OrganisationNumber',
        :'our_reference' => :'OurReference',
        :'phone1' => :'Phone1',
        :'phone2' => :'Phone2',
        :'price_list' => :'PriceList',
        :'project' => :'Project',
        :'sales_account' => :'SalesAccount',
        :'show_price_vat_included' => :'ShowPriceVATIncluded',
        :'terms_of_delivery' => :'TermsOfDelivery',
        :'terms_of_payment' => :'TermsOfPayment',
        :'type' => :'Type',
        :'vat_number' => :'VATNumber',
        :'vat_type' => :'VATType',
        :'visiting_address' => :'VisitingAddress',
        :'visiting_city' => :'VisitingCity',
        :'visiting_country' => :'VisitingCountry',
        :'visiting_country_code' => :'VisitingCountryCode',
        :'visiting_zip_code' => :'VisitingZipCode',
        :'www' => :'WWW',
        :'way_of_delivery' => :'WayOfDelivery',
        :'your_reference' => :'YourReference',
        :'zip_code' => :'ZipCode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'url' => :'String',
        :'active' => :'BOOLEAN',
        :'address1' => :'String',
        :'address2' => :'String',
        :'city' => :'String',
        :'comments' => :'String',
        :'cost_center' => :'String',
        :'country' => :'String',
        :'country_code' => :'String',
        :'currency' => :'String',
        :'customer_number' => :'String',
        :'default_delivery_types' => :'CustomerCustomerDefaultDeliveryTypes',
        :'default_templates' => :'CustomerCustomerDefaultTemplates',
        :'delivery_address1' => :'String',
        :'delivery_address2' => :'String',
        :'delivery_city' => :'String',
        :'delivery_country' => :'String',
        :'delivery_country_code' => :'String',
        :'delivery_fax' => :'String',
        :'delivery_name' => :'String',
        :'delivery_phone1' => :'String',
        :'delivery_phone2' => :'String',
        :'delivery_zip_code' => :'String',
        :'email' => :'String',
        :'email_invoice' => :'String',
        :'email_invoice_bcc' => :'String',
        :'email_invoice_cc' => :'String',
        :'email_offer' => :'String',
        :'email_offer_bcc' => :'String',
        :'email_offer_cc' => :'String',
        :'email_order' => :'String',
        :'email_order_bcc' => :'String',
        :'email_order_cc' => :'String',
        :'external_reference' => :'String',
        :'fax' => :'String',
        :'gln' => :'String',
        :'gln_delivery' => :'String',
        :'invoice_remark' => :'String',
        :'name' => :'String',
        :'organisation_number' => :'String',
        :'our_reference' => :'String',
        :'phone1' => :'String',
        :'phone2' => :'String',
        :'price_list' => :'String',
        :'project' => :'String',
        :'sales_account' => :'String',
        :'show_price_vat_included' => :'BOOLEAN',
        :'terms_of_delivery' => :'String',
        :'terms_of_payment' => :'String',
        :'type' => :'String',
        :'vat_number' => :'String',
        :'vat_type' => :'String',
        :'visiting_address' => :'String',
        :'visiting_city' => :'String',
        :'visiting_country' => :'String',
        :'visiting_country_code' => :'String',
        :'visiting_zip_code' => :'String',
        :'www' => :'String',
        :'way_of_delivery' => :'String',
        :'your_reference' => :'String',
        :'zip_code' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'@url')
        self.url = attributes[:'@url']
      end

      if attributes.has_key?(:'Active')
        self.active = attributes[:'Active']
      end

      if attributes.has_key?(:'Address1')
        self.address1 = attributes[:'Address1']
      end

      if attributes.has_key?(:'Address2')
        self.address2 = attributes[:'Address2']
      end

      if attributes.has_key?(:'City')
        self.city = attributes[:'City']
      end

      if attributes.has_key?(:'Comments')
        self.comments = attributes[:'Comments']
      end

      if attributes.has_key?(:'CostCenter')
        self.cost_center = attributes[:'CostCenter']
      end

      if attributes.has_key?(:'Country')
        self.country = attributes[:'Country']
      end

      if attributes.has_key?(:'CountryCode')
        self.country_code = attributes[:'CountryCode']
      end

      if attributes.has_key?(:'Currency')
        self.currency = attributes[:'Currency']
      end

      if attributes.has_key?(:'CustomerNumber')
        self.customer_number = attributes[:'CustomerNumber']
      end

      if attributes.has_key?(:'DefaultDeliveryTypes')
        self.default_delivery_types = attributes[:'DefaultDeliveryTypes']
      end

      if attributes.has_key?(:'DefaultTemplates')
        self.default_templates = attributes[:'DefaultTemplates']
      end

      if attributes.has_key?(:'DeliveryAddress1')
        self.delivery_address1 = attributes[:'DeliveryAddress1']
      end

      if attributes.has_key?(:'DeliveryAddress2')
        self.delivery_address2 = attributes[:'DeliveryAddress2']
      end

      if attributes.has_key?(:'DeliveryCity')
        self.delivery_city = attributes[:'DeliveryCity']
      end

      if attributes.has_key?(:'DeliveryCountry')
        self.delivery_country = attributes[:'DeliveryCountry']
      end

      if attributes.has_key?(:'DeliveryCountryCode')
        self.delivery_country_code = attributes[:'DeliveryCountryCode']
      end

      if attributes.has_key?(:'DeliveryFax')
        self.delivery_fax = attributes[:'DeliveryFax']
      end

      if attributes.has_key?(:'DeliveryName')
        self.delivery_name = attributes[:'DeliveryName']
      end

      if attributes.has_key?(:'DeliveryPhone1')
        self.delivery_phone1 = attributes[:'DeliveryPhone1']
      end

      if attributes.has_key?(:'DeliveryPhone2')
        self.delivery_phone2 = attributes[:'DeliveryPhone2']
      end

      if attributes.has_key?(:'DeliveryZipCode')
        self.delivery_zip_code = attributes[:'DeliveryZipCode']
      end

      if attributes.has_key?(:'Email')
        self.email = attributes[:'Email']
      end

      if attributes.has_key?(:'EmailInvoice')
        self.email_invoice = attributes[:'EmailInvoice']
      end

      if attributes.has_key?(:'EmailInvoiceBCC')
        self.email_invoice_bcc = attributes[:'EmailInvoiceBCC']
      end

      if attributes.has_key?(:'EmailInvoiceCC')
        self.email_invoice_cc = attributes[:'EmailInvoiceCC']
      end

      if attributes.has_key?(:'EmailOffer')
        self.email_offer = attributes[:'EmailOffer']
      end

      if attributes.has_key?(:'EmailOfferBCC')
        self.email_offer_bcc = attributes[:'EmailOfferBCC']
      end

      if attributes.has_key?(:'EmailOfferCC')
        self.email_offer_cc = attributes[:'EmailOfferCC']
      end

      if attributes.has_key?(:'EmailOrder')
        self.email_order = attributes[:'EmailOrder']
      end

      if attributes.has_key?(:'EmailOrderBCC')
        self.email_order_bcc = attributes[:'EmailOrderBCC']
      end

      if attributes.has_key?(:'EmailOrderCC')
        self.email_order_cc = attributes[:'EmailOrderCC']
      end

      if attributes.has_key?(:'ExternalReference')
        self.external_reference = attributes[:'ExternalReference']
      end

      if attributes.has_key?(:'Fax')
        self.fax = attributes[:'Fax']
      end

      if attributes.has_key?(:'GLN')
        self.gln = attributes[:'GLN']
      end

      if attributes.has_key?(:'GLNDelivery')
        self.gln_delivery = attributes[:'GLNDelivery']
      end

      if attributes.has_key?(:'InvoiceRemark')
        self.invoice_remark = attributes[:'InvoiceRemark']
      end

      if attributes.has_key?(:'Name')
        self.name = attributes[:'Name']
      end

      if attributes.has_key?(:'OrganisationNumber')
        self.organisation_number = attributes[:'OrganisationNumber']
      end

      if attributes.has_key?(:'OurReference')
        self.our_reference = attributes[:'OurReference']
      end

      if attributes.has_key?(:'Phone1')
        self.phone1 = attributes[:'Phone1']
      end

      if attributes.has_key?(:'Phone2')
        self.phone2 = attributes[:'Phone2']
      end

      if attributes.has_key?(:'PriceList')
        self.price_list = attributes[:'PriceList']
      end

      if attributes.has_key?(:'Project')
        self.project = attributes[:'Project']
      end

      if attributes.has_key?(:'SalesAccount')
        self.sales_account = attributes[:'SalesAccount']
      end

      if attributes.has_key?(:'ShowPriceVATIncluded')
        self.show_price_vat_included = attributes[:'ShowPriceVATIncluded']
      end

      if attributes.has_key?(:'TermsOfDelivery')
        self.terms_of_delivery = attributes[:'TermsOfDelivery']
      end

      if attributes.has_key?(:'TermsOfPayment')
        self.terms_of_payment = attributes[:'TermsOfPayment']
      end

      if attributes.has_key?(:'Type')
        self.type = attributes[:'Type']
      end

      if attributes.has_key?(:'VATNumber')
        self.vat_number = attributes[:'VATNumber']
      end

      if attributes.has_key?(:'VATType')
        self.vat_type = attributes[:'VATType']
      end

      if attributes.has_key?(:'VisitingAddress')
        self.visiting_address = attributes[:'VisitingAddress']
      end

      if attributes.has_key?(:'VisitingCity')
        self.visiting_city = attributes[:'VisitingCity']
      end

      if attributes.has_key?(:'VisitingCountry')
        self.visiting_country = attributes[:'VisitingCountry']
      end

      if attributes.has_key?(:'VisitingCountryCode')
        self.visiting_country_code = attributes[:'VisitingCountryCode']
      end

      if attributes.has_key?(:'VisitingZipCode')
        self.visiting_zip_code = attributes[:'VisitingZipCode']
      end

      if attributes.has_key?(:'WWW')
        self.www = attributes[:'WWW']
      end

      if attributes.has_key?(:'WayOfDelivery')
        self.way_of_delivery = attributes[:'WayOfDelivery']
      end

      if attributes.has_key?(:'YourReference')
        self.your_reference = attributes[:'YourReference']
      end

      if attributes.has_key?(:'ZipCode')
        self.zip_code = attributes[:'ZipCode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@address1.nil? && @address1.to_s.length > 1024
        invalid_properties.push('invalid value for "address1", the character length must be smaller than or equal to 1024.')
      end

      if !@address2.nil? && @address2.to_s.length > 1024
        invalid_properties.push('invalid value for "address2", the character length must be smaller than or equal to 1024.')
      end

      if !@city.nil? && @city.to_s.length > 1024
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 1024.')
      end

      if !@comments.nil? && @comments.to_s.length > 1024
        invalid_properties.push('invalid value for "comments", the character length must be smaller than or equal to 1024.')
      end

      if !@country_code.nil? && @country_code.to_s.length > 2
        invalid_properties.push('invalid value for "country_code", the character length must be smaller than or equal to 2.')
      end

      if !@currency.nil? && @currency.to_s.length > 3
        invalid_properties.push('invalid value for "currency", the character length must be smaller than or equal to 3.')
      end

      if !@customer_number.nil? && @customer_number.to_s.length > 1024
        invalid_properties.push('invalid value for "customer_number", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_address1.nil? && @delivery_address1.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_address1", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_address2.nil? && @delivery_address2.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_address2", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_city.nil? && @delivery_city.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_city", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_country.nil? && @delivery_country.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_country", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_country_code.nil? && @delivery_country_code.to_s.length > 2
        invalid_properties.push('invalid value for "delivery_country_code", the character length must be smaller than or equal to 2.')
      end

      if !@delivery_fax.nil? && @delivery_fax.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_fax", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_name.nil? && @delivery_name.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_name", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_phone1.nil? && @delivery_phone1.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_phone1", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_phone2.nil? && @delivery_phone2.to_s.length > 1024
        invalid_properties.push('invalid value for "delivery_phone2", the character length must be smaller than or equal to 1024.')
      end

      if !@delivery_zip_code.nil? && @delivery_zip_code.to_s.length > 10
        invalid_properties.push('invalid value for "delivery_zip_code", the character length must be smaller than or equal to 10.')
      end

      if !@email.nil? && @email.to_s.length > 1024
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 1024.')
      end

      if !@email_invoice.nil? && @email_invoice.to_s.length > 1024
        invalid_properties.push('invalid value for "email_invoice", the character length must be smaller than or equal to 1024.')
      end

      if !@email_invoice_bcc.nil? && @email_invoice_bcc.to_s.length > 1024
        invalid_properties.push('invalid value for "email_invoice_bcc", the character length must be smaller than or equal to 1024.')
      end

      if !@email_invoice_cc.nil? && @email_invoice_cc.to_s.length > 1024
        invalid_properties.push('invalid value for "email_invoice_cc", the character length must be smaller than or equal to 1024.')
      end

      if !@email_offer.nil? && @email_offer.to_s.length > 1024
        invalid_properties.push('invalid value for "email_offer", the character length must be smaller than or equal to 1024.')
      end

      if !@email_offer_bcc.nil? && @email_offer_bcc.to_s.length > 1024
        invalid_properties.push('invalid value for "email_offer_bcc", the character length must be smaller than or equal to 1024.')
      end

      if !@email_offer_cc.nil? && @email_offer_cc.to_s.length > 1024
        invalid_properties.push('invalid value for "email_offer_cc", the character length must be smaller than or equal to 1024.')
      end

      if !@email_order.nil? && @email_order.to_s.length > 1024
        invalid_properties.push('invalid value for "email_order", the character length must be smaller than or equal to 1024.')
      end

      if !@email_order_bcc.nil? && @email_order_bcc.to_s.length > 1024
        invalid_properties.push('invalid value for "email_order_bcc", the character length must be smaller than or equal to 1024.')
      end

      if !@email_order_cc.nil? && @email_order_cc.to_s.length > 1024
        invalid_properties.push('invalid value for "email_order_cc", the character length must be smaller than or equal to 1024.')
      end

      if !@external_reference.nil? && @external_reference.to_s.length > 1024
        invalid_properties.push('invalid value for "external_reference", the character length must be smaller than or equal to 1024.')
      end

      if !@fax.nil? && @fax.to_s.length > 1024
        invalid_properties.push('invalid value for "fax", the character length must be smaller than or equal to 1024.')
      end

      if !@gln.nil? && @gln.to_s.length > 1024
        invalid_properties.push('invalid value for "gln", the character length must be smaller than or equal to 1024.')
      end

      if !@gln_delivery.nil? && @gln_delivery.to_s.length > 1024
        invalid_properties.push('invalid value for "gln_delivery", the character length must be smaller than or equal to 1024.')
      end

      if !@invoice_remark.nil? && @invoice_remark.to_s.length > 1024
        invalid_properties.push('invalid value for "invoice_remark", the character length must be smaller than or equal to 1024.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 1024
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 1024.')
      end

      if !@organisation_number.nil? && @organisation_number.to_s.length > 30
        invalid_properties.push('invalid value for "organisation_number", the character length must be smaller than or equal to 30.')
      end

      if !@our_reference.nil? && @our_reference.to_s.length > 50
        invalid_properties.push('invalid value for "our_reference", the character length must be smaller than or equal to 50.')
      end

      if !@phone1.nil? && @phone1.to_s.length > 1024
        invalid_properties.push('invalid value for "phone1", the character length must be smaller than or equal to 1024.')
      end

      if !@phone2.nil? && @phone2.to_s.length > 1024
        invalid_properties.push('invalid value for "phone2", the character length must be smaller than or equal to 1024.')
      end

      if !@sales_account.nil? && @sales_account.to_s.length > 4
        invalid_properties.push('invalid value for "sales_account", the character length must be smaller than or equal to 4.')
      end

      if !@visiting_address.nil? && @visiting_address.to_s.length > 128
        invalid_properties.push('invalid value for "visiting_address", the character length must be smaller than or equal to 128.')
      end

      if !@visiting_city.nil? && @visiting_city.to_s.length > 128
        invalid_properties.push('invalid value for "visiting_city", the character length must be smaller than or equal to 128.')
      end

      if !@visiting_country_code.nil? && @visiting_country_code.to_s.length > 2
        invalid_properties.push('invalid value for "visiting_country_code", the character length must be smaller than or equal to 2.')
      end

      if !@visiting_zip_code.nil? && @visiting_zip_code.to_s.length > 10
        invalid_properties.push('invalid value for "visiting_zip_code", the character length must be smaller than or equal to 10.')
      end

      if !@www.nil? && @www.to_s.length > 128
        invalid_properties.push('invalid value for "www", the character length must be smaller than or equal to 128.')
      end

      if !@your_reference.nil? && @your_reference.to_s.length > 50
        invalid_properties.push('invalid value for "your_reference", the character length must be smaller than or equal to 50.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 10
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 10.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@address1.nil? && @address1.to_s.length > 1024
      return false if !@address2.nil? && @address2.to_s.length > 1024
      return false if !@city.nil? && @city.to_s.length > 1024
      return false if !@comments.nil? && @comments.to_s.length > 1024
      return false if !@country_code.nil? && @country_code.to_s.length > 2
      return false if !@currency.nil? && @currency.to_s.length > 3
      return false if !@customer_number.nil? && @customer_number.to_s.length > 1024
      return false if !@delivery_address1.nil? && @delivery_address1.to_s.length > 1024
      return false if !@delivery_address2.nil? && @delivery_address2.to_s.length > 1024
      return false if !@delivery_city.nil? && @delivery_city.to_s.length > 1024
      return false if !@delivery_country.nil? && @delivery_country.to_s.length > 1024
      return false if !@delivery_country_code.nil? && @delivery_country_code.to_s.length > 2
      return false if !@delivery_fax.nil? && @delivery_fax.to_s.length > 1024
      return false if !@delivery_name.nil? && @delivery_name.to_s.length > 1024
      return false if !@delivery_phone1.nil? && @delivery_phone1.to_s.length > 1024
      return false if !@delivery_phone2.nil? && @delivery_phone2.to_s.length > 1024
      return false if !@delivery_zip_code.nil? && @delivery_zip_code.to_s.length > 10
      return false if !@email.nil? && @email.to_s.length > 1024
      return false if !@email_invoice.nil? && @email_invoice.to_s.length > 1024
      return false if !@email_invoice_bcc.nil? && @email_invoice_bcc.to_s.length > 1024
      return false if !@email_invoice_cc.nil? && @email_invoice_cc.to_s.length > 1024
      return false if !@email_offer.nil? && @email_offer.to_s.length > 1024
      return false if !@email_offer_bcc.nil? && @email_offer_bcc.to_s.length > 1024
      return false if !@email_offer_cc.nil? && @email_offer_cc.to_s.length > 1024
      return false if !@email_order.nil? && @email_order.to_s.length > 1024
      return false if !@email_order_bcc.nil? && @email_order_bcc.to_s.length > 1024
      return false if !@email_order_cc.nil? && @email_order_cc.to_s.length > 1024
      return false if !@external_reference.nil? && @external_reference.to_s.length > 1024
      return false if !@fax.nil? && @fax.to_s.length > 1024
      return false if !@gln.nil? && @gln.to_s.length > 1024
      return false if !@gln_delivery.nil? && @gln_delivery.to_s.length > 1024
      return false if !@invoice_remark.nil? && @invoice_remark.to_s.length > 1024
      return false if @name.nil?
      return false if @name.to_s.length > 1024
      return false if !@organisation_number.nil? && @organisation_number.to_s.length > 30
      return false if !@our_reference.nil? && @our_reference.to_s.length > 50
      return false if !@phone1.nil? && @phone1.to_s.length > 1024
      return false if !@phone2.nil? && @phone2.to_s.length > 1024
      return false if !@sales_account.nil? && @sales_account.to_s.length > 4
      return false if !@visiting_address.nil? && @visiting_address.to_s.length > 128
      return false if !@visiting_city.nil? && @visiting_city.to_s.length > 128
      return false if !@visiting_country_code.nil? && @visiting_country_code.to_s.length > 2
      return false if !@visiting_zip_code.nil? && @visiting_zip_code.to_s.length > 10
      return false if !@www.nil? && @www.to_s.length > 128
      return false if !@your_reference.nil? && @your_reference.to_s.length > 50
      return false if !@zip_code.nil? && @zip_code.to_s.length > 10
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] address1 Value to be assigned
    def address1=(address1)
      if !address1.nil? && address1.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address1", the character length must be smaller than or equal to 1024.'
      end

      @address1 = address1
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      if !address2.nil? && address2.to_s.length > 1024
        fail ArgumentError, 'invalid value for "address2", the character length must be smaller than or equal to 1024.'
      end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 1024
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 1024.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] comments Value to be assigned
    def comments=(comments)
      if !comments.nil? && comments.to_s.length > 1024
        fail ArgumentError, 'invalid value for "comments", the character length must be smaller than or equal to 1024.'
      end

      @comments = comments
    end

    # Custom attribute writer method with validation
    # @param [Object] country_code Value to be assigned
    def country_code=(country_code)
      if !country_code.nil? && country_code.to_s.length > 2
        fail ArgumentError, 'invalid value for "country_code", the character length must be smaller than or equal to 2.'
      end

      @country_code = country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] currency Value to be assigned
    def currency=(currency)
      if !currency.nil? && currency.to_s.length > 3
        fail ArgumentError, 'invalid value for "currency", the character length must be smaller than or equal to 3.'
      end

      @currency = currency
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_number Value to be assigned
    def customer_number=(customer_number)
      if !customer_number.nil? && customer_number.to_s.length > 1024
        fail ArgumentError, 'invalid value for "customer_number", the character length must be smaller than or equal to 1024.'
      end

      @customer_number = customer_number
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_address1 Value to be assigned
    def delivery_address1=(delivery_address1)
      if !delivery_address1.nil? && delivery_address1.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_address1", the character length must be smaller than or equal to 1024.'
      end

      @delivery_address1 = delivery_address1
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_address2 Value to be assigned
    def delivery_address2=(delivery_address2)
      if !delivery_address2.nil? && delivery_address2.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_address2", the character length must be smaller than or equal to 1024.'
      end

      @delivery_address2 = delivery_address2
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_city Value to be assigned
    def delivery_city=(delivery_city)
      if !delivery_city.nil? && delivery_city.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_city", the character length must be smaller than or equal to 1024.'
      end

      @delivery_city = delivery_city
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_country Value to be assigned
    def delivery_country=(delivery_country)
      if !delivery_country.nil? && delivery_country.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_country", the character length must be smaller than or equal to 1024.'
      end

      @delivery_country = delivery_country
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_country_code Value to be assigned
    def delivery_country_code=(delivery_country_code)
      if !delivery_country_code.nil? && delivery_country_code.to_s.length > 2
        fail ArgumentError, 'invalid value for "delivery_country_code", the character length must be smaller than or equal to 2.'
      end

      @delivery_country_code = delivery_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_fax Value to be assigned
    def delivery_fax=(delivery_fax)
      if !delivery_fax.nil? && delivery_fax.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_fax", the character length must be smaller than or equal to 1024.'
      end

      @delivery_fax = delivery_fax
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_name Value to be assigned
    def delivery_name=(delivery_name)
      if !delivery_name.nil? && delivery_name.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_name", the character length must be smaller than or equal to 1024.'
      end

      @delivery_name = delivery_name
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_phone1 Value to be assigned
    def delivery_phone1=(delivery_phone1)
      if !delivery_phone1.nil? && delivery_phone1.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_phone1", the character length must be smaller than or equal to 1024.'
      end

      @delivery_phone1 = delivery_phone1
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_phone2 Value to be assigned
    def delivery_phone2=(delivery_phone2)
      if !delivery_phone2.nil? && delivery_phone2.to_s.length > 1024
        fail ArgumentError, 'invalid value for "delivery_phone2", the character length must be smaller than or equal to 1024.'
      end

      @delivery_phone2 = delivery_phone2
    end

    # Custom attribute writer method with validation
    # @param [Object] delivery_zip_code Value to be assigned
    def delivery_zip_code=(delivery_zip_code)
      if !delivery_zip_code.nil? && delivery_zip_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "delivery_zip_code", the character length must be smaller than or equal to 10.'
      end

      @delivery_zip_code = delivery_zip_code
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 1024.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] email_invoice Value to be assigned
    def email_invoice=(email_invoice)
      if !email_invoice.nil? && email_invoice.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email_invoice", the character length must be smaller than or equal to 1024.'
      end

      @email_invoice = email_invoice
    end

    # Custom attribute writer method with validation
    # @param [Object] email_invoice_bcc Value to be assigned
    def email_invoice_bcc=(email_invoice_bcc)
      if !email_invoice_bcc.nil? && email_invoice_bcc.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email_invoice_bcc", the character length must be smaller than or equal to 1024.'
      end

      @email_invoice_bcc = email_invoice_bcc
    end

    # Custom attribute writer method with validation
    # @param [Object] email_invoice_cc Value to be assigned
    def email_invoice_cc=(email_invoice_cc)
      if !email_invoice_cc.nil? && email_invoice_cc.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email_invoice_cc", the character length must be smaller than or equal to 1024.'
      end

      @email_invoice_cc = email_invoice_cc
    end

    # Custom attribute writer method with validation
    # @param [Object] email_offer Value to be assigned
    def email_offer=(email_offer)
      if !email_offer.nil? && email_offer.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email_offer", the character length must be smaller than or equal to 1024.'
      end

      @email_offer = email_offer
    end

    # Custom attribute writer method with validation
    # @param [Object] email_offer_bcc Value to be assigned
    def email_offer_bcc=(email_offer_bcc)
      if !email_offer_bcc.nil? && email_offer_bcc.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email_offer_bcc", the character length must be smaller than or equal to 1024.'
      end

      @email_offer_bcc = email_offer_bcc
    end

    # Custom attribute writer method with validation
    # @param [Object] email_offer_cc Value to be assigned
    def email_offer_cc=(email_offer_cc)
      if !email_offer_cc.nil? && email_offer_cc.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email_offer_cc", the character length must be smaller than or equal to 1024.'
      end

      @email_offer_cc = email_offer_cc
    end

    # Custom attribute writer method with validation
    # @param [Object] email_order Value to be assigned
    def email_order=(email_order)
      if !email_order.nil? && email_order.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email_order", the character length must be smaller than or equal to 1024.'
      end

      @email_order = email_order
    end

    # Custom attribute writer method with validation
    # @param [Object] email_order_bcc Value to be assigned
    def email_order_bcc=(email_order_bcc)
      if !email_order_bcc.nil? && email_order_bcc.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email_order_bcc", the character length must be smaller than or equal to 1024.'
      end

      @email_order_bcc = email_order_bcc
    end

    # Custom attribute writer method with validation
    # @param [Object] email_order_cc Value to be assigned
    def email_order_cc=(email_order_cc)
      if !email_order_cc.nil? && email_order_cc.to_s.length > 1024
        fail ArgumentError, 'invalid value for "email_order_cc", the character length must be smaller than or equal to 1024.'
      end

      @email_order_cc = email_order_cc
    end

    # Custom attribute writer method with validation
    # @param [Object] external_reference Value to be assigned
    def external_reference=(external_reference)
      if !external_reference.nil? && external_reference.to_s.length > 1024
        fail ArgumentError, 'invalid value for "external_reference", the character length must be smaller than or equal to 1024.'
      end

      @external_reference = external_reference
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length > 1024
        fail ArgumentError, 'invalid value for "fax", the character length must be smaller than or equal to 1024.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] gln Value to be assigned
    def gln=(gln)
      if !gln.nil? && gln.to_s.length > 1024
        fail ArgumentError, 'invalid value for "gln", the character length must be smaller than or equal to 1024.'
      end

      @gln = gln
    end

    # Custom attribute writer method with validation
    # @param [Object] gln_delivery Value to be assigned
    def gln_delivery=(gln_delivery)
      if !gln_delivery.nil? && gln_delivery.to_s.length > 1024
        fail ArgumentError, 'invalid value for "gln_delivery", the character length must be smaller than or equal to 1024.'
      end

      @gln_delivery = gln_delivery
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_remark Value to be assigned
    def invoice_remark=(invoice_remark)
      if !invoice_remark.nil? && invoice_remark.to_s.length > 1024
        fail ArgumentError, 'invalid value for "invoice_remark", the character length must be smaller than or equal to 1024.'
      end

      @invoice_remark = invoice_remark
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 1024
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 1024.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] organisation_number Value to be assigned
    def organisation_number=(organisation_number)
      if !organisation_number.nil? && organisation_number.to_s.length > 30
        fail ArgumentError, 'invalid value for "organisation_number", the character length must be smaller than or equal to 30.'
      end

      @organisation_number = organisation_number
    end

    # Custom attribute writer method with validation
    # @param [Object] our_reference Value to be assigned
    def our_reference=(our_reference)
      if !our_reference.nil? && our_reference.to_s.length > 50
        fail ArgumentError, 'invalid value for "our_reference", the character length must be smaller than or equal to 50.'
      end

      @our_reference = our_reference
    end

    # Custom attribute writer method with validation
    # @param [Object] phone1 Value to be assigned
    def phone1=(phone1)
      if !phone1.nil? && phone1.to_s.length > 1024
        fail ArgumentError, 'invalid value for "phone1", the character length must be smaller than or equal to 1024.'
      end

      @phone1 = phone1
    end

    # Custom attribute writer method with validation
    # @param [Object] phone2 Value to be assigned
    def phone2=(phone2)
      if !phone2.nil? && phone2.to_s.length > 1024
        fail ArgumentError, 'invalid value for "phone2", the character length must be smaller than or equal to 1024.'
      end

      @phone2 = phone2
    end

    # Custom attribute writer method with validation
    # @param [Object] sales_account Value to be assigned
    def sales_account=(sales_account)
      if !sales_account.nil? && sales_account.to_s.length > 4
        fail ArgumentError, 'invalid value for "sales_account", the character length must be smaller than or equal to 4.'
      end

      @sales_account = sales_account
    end

    # Custom attribute writer method with validation
    # @param [Object] visiting_address Value to be assigned
    def visiting_address=(visiting_address)
      if !visiting_address.nil? && visiting_address.to_s.length > 128
        fail ArgumentError, 'invalid value for "visiting_address", the character length must be smaller than or equal to 128.'
      end

      @visiting_address = visiting_address
    end

    # Custom attribute writer method with validation
    # @param [Object] visiting_city Value to be assigned
    def visiting_city=(visiting_city)
      if !visiting_city.nil? && visiting_city.to_s.length > 128
        fail ArgumentError, 'invalid value for "visiting_city", the character length must be smaller than or equal to 128.'
      end

      @visiting_city = visiting_city
    end

    # Custom attribute writer method with validation
    # @param [Object] visiting_country_code Value to be assigned
    def visiting_country_code=(visiting_country_code)
      if !visiting_country_code.nil? && visiting_country_code.to_s.length > 2
        fail ArgumentError, 'invalid value for "visiting_country_code", the character length must be smaller than or equal to 2.'
      end

      @visiting_country_code = visiting_country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] visiting_zip_code Value to be assigned
    def visiting_zip_code=(visiting_zip_code)
      if !visiting_zip_code.nil? && visiting_zip_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "visiting_zip_code", the character length must be smaller than or equal to 10.'
      end

      @visiting_zip_code = visiting_zip_code
    end

    # Custom attribute writer method with validation
    # @param [Object] www Value to be assigned
    def www=(www)
      if !www.nil? && www.to_s.length > 128
        fail ArgumentError, 'invalid value for "www", the character length must be smaller than or equal to 128.'
      end

      @www = www
    end

    # Custom attribute writer method with validation
    # @param [Object] your_reference Value to be assigned
    def your_reference=(your_reference)
      if !your_reference.nil? && your_reference.to_s.length > 50
        fail ArgumentError, 'invalid value for "your_reference", the character length must be smaller than or equal to 50.'
      end

      @your_reference = your_reference
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 10
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 10.'
      end

      @zip_code = zip_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          active == o.active &&
          address1 == o.address1 &&
          address2 == o.address2 &&
          city == o.city &&
          comments == o.comments &&
          cost_center == o.cost_center &&
          country == o.country &&
          country_code == o.country_code &&
          currency == o.currency &&
          customer_number == o.customer_number &&
          default_delivery_types == o.default_delivery_types &&
          default_templates == o.default_templates &&
          delivery_address1 == o.delivery_address1 &&
          delivery_address2 == o.delivery_address2 &&
          delivery_city == o.delivery_city &&
          delivery_country == o.delivery_country &&
          delivery_country_code == o.delivery_country_code &&
          delivery_fax == o.delivery_fax &&
          delivery_name == o.delivery_name &&
          delivery_phone1 == o.delivery_phone1 &&
          delivery_phone2 == o.delivery_phone2 &&
          delivery_zip_code == o.delivery_zip_code &&
          email == o.email &&
          email_invoice == o.email_invoice &&
          email_invoice_bcc == o.email_invoice_bcc &&
          email_invoice_cc == o.email_invoice_cc &&
          email_offer == o.email_offer &&
          email_offer_bcc == o.email_offer_bcc &&
          email_offer_cc == o.email_offer_cc &&
          email_order == o.email_order &&
          email_order_bcc == o.email_order_bcc &&
          email_order_cc == o.email_order_cc &&
          external_reference == o.external_reference &&
          fax == o.fax &&
          gln == o.gln &&
          gln_delivery == o.gln_delivery &&
          invoice_remark == o.invoice_remark &&
          name == o.name &&
          organisation_number == o.organisation_number &&
          our_reference == o.our_reference &&
          phone1 == o.phone1 &&
          phone2 == o.phone2 &&
          price_list == o.price_list &&
          project == o.project &&
          sales_account == o.sales_account &&
          show_price_vat_included == o.show_price_vat_included &&
          terms_of_delivery == o.terms_of_delivery &&
          terms_of_payment == o.terms_of_payment &&
          type == o.type &&
          vat_number == o.vat_number &&
          vat_type == o.vat_type &&
          visiting_address == o.visiting_address &&
          visiting_city == o.visiting_city &&
          visiting_country == o.visiting_country &&
          visiting_country_code == o.visiting_country_code &&
          visiting_zip_code == o.visiting_zip_code &&
          www == o.www &&
          way_of_delivery == o.way_of_delivery &&
          your_reference == o.your_reference &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [url, active, address1, address2, city, comments, cost_center, country, country_code, currency, customer_number, default_delivery_types, default_templates, delivery_address1, delivery_address2, delivery_city, delivery_country, delivery_country_code, delivery_fax, delivery_name, delivery_phone1, delivery_phone2, delivery_zip_code, email, email_invoice, email_invoice_bcc, email_invoice_cc, email_offer, email_offer_bcc, email_offer_cc, email_order, email_order_bcc, email_order_cc, external_reference, fax, gln, gln_delivery, invoice_remark, name, organisation_number, our_reference, phone1, phone2, price_list, project, sales_account, show_price_vat_included, terms_of_delivery, terms_of_payment, type, vat_number, vat_type, visiting_address, visiting_city, visiting_country, visiting_country_code, visiting_zip_code, www, way_of_delivery, your_reference, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = StandoutFortnox.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
