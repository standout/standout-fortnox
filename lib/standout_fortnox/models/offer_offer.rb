=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.23
=end

require 'date'

module StandoutFortnox
  class OfferOffer
    # Direct url to the record and URL to Taxreduction for the offer (URL to Taxreduction shows even if â€“ Taxreduction is connected to offer)
    attr_accessor :url

    # Direct url to the tax reduction for the invoice. This is visible even if no tax reduction exists.
    attr_accessor :url_tax_reduction_list

    # Administration fee
    attr_accessor :administration_fee

    # VAT of the administration fee
    attr_accessor :administration_fee_vat

    # Address 1
    attr_accessor :address1

    # Address 2
    attr_accessor :address2

    # The amount that Taxreduction is based on
    attr_accessor :basis_tax_reduction

    # If the offer is cancelled
    attr_accessor :cancelled

    # City
    attr_accessor :city

    # Comments
    attr_accessor :comments

    # Contribution in Percent
    attr_accessor :contribution_percent

    # Contribution in amount
    attr_accessor :contribution_value

    # Remarks will be copied from offer to order
    attr_accessor :copy_remarks

    # Country
    attr_accessor :country

    # Cost center
    attr_accessor :cost_center

    # Currency
    attr_accessor :currency

    # Currency rate
    attr_accessor :currency_rate

    # Currency unit
    attr_accessor :currency_unit

    # Customer name
    attr_accessor :customer_name

    # Customer number
    attr_accessor :customer_number

    # Delivery address 1
    attr_accessor :delivery_address1

    # Delivery address 2
    attr_accessor :delivery_address2

    # Delivery City
    attr_accessor :delivery_city

    # Delivery Country
    attr_accessor :delivery_country

    # Delivery date
    attr_accessor :delivery_date

    # Delivery name
    attr_accessor :delivery_name

    # Delivery zipcode
    attr_accessor :delivery_zip_code

    # Document Number
    attr_accessor :document_number

    attr_accessor :email_information

    # Expire date
    attr_accessor :expire_date

    # Freight
    attr_accessor :freight

    # VAT of the freight
    attr_accessor :freight_vat

    # Gross value of the offer
    attr_accessor :gross

    # If offer is marked with housework
    attr_accessor :house_work

    # Reference if an order is created from offer
    attr_accessor :invoice_reference

    # TODO: Saknas i Fortnox offertdokumentation
    attr_accessor :language

    # Net amount
    attr_accessor :net

    # If the offer is marked Completed (this mark stops the offer from being cancelled or that a user can create an order from the offer)
    attr_accessor :not_completed

    # Date of offer
    attr_accessor :offer_date

    # Offer rows
    attr_accessor :offer_rows

    # Reference to order
    attr_accessor :order_reference

    # Organisation number
    attr_accessor :organisation_number

    # Our reference
    attr_accessor :our_reference

    # Phone 1
    attr_accessor :phone1

    # Phone 2
    attr_accessor :phone2

    # Pricelist code
    attr_accessor :price_list

    # Print document template
    attr_accessor :print_template

    # Project code
    attr_accessor :project

    # Remarks on offer
    attr_accessor :remarks

    # Round off amount
    attr_accessor :round_off

    # If document is printed or e-mailed to customer
    attr_accessor :sent

    # Amount of Taxreduction
    attr_accessor :tax_reduction

    # Terms of delivery code
    attr_accessor :terms_of_delivery

    # Terms of payment code
    attr_accessor :terms_of_payment

    # Total amount
    attr_accessor :total

    # TODO: saknas i Fortnox dokumentation
    attr_accessor :total_to_pay

    # Total vat amount
    attr_accessor :total_vat

    # If offer row price exclude or include vat
    attr_accessor :vat_included

    # Code of delivery
    attr_accessor :way_of_delivery

    # Customer reference
    attr_accessor :your_reference

    # ReferenceNumber
    attr_accessor :your_reference_number

    # Zip code
    attr_accessor :zip_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'@Url',
        :'url_tax_reduction_list' => :'@UrlTaxReductionList',
        :'administration_fee' => :'AdministrationFee',
        :'administration_fee_vat' => :'AdministrationFeeVAT',
        :'address1' => :'Address1',
        :'address2' => :'Address2',
        :'basis_tax_reduction' => :'BasisTaxReduction',
        :'cancelled' => :'Cancelled',
        :'city' => :'City',
        :'comments' => :'Comments',
        :'contribution_percent' => :'ContributionPercent',
        :'contribution_value' => :'ContributionValue',
        :'copy_remarks' => :'CopyRemarks',
        :'country' => :'Country',
        :'cost_center' => :'CostCenter',
        :'currency' => :'Currency',
        :'currency_rate' => :'CurrencyRate',
        :'currency_unit' => :'CurrencyUnit',
        :'customer_name' => :'CustomerName',
        :'customer_number' => :'CustomerNumber',
        :'delivery_address1' => :'DeliveryAddress1',
        :'delivery_address2' => :'DeliveryAddress2',
        :'delivery_city' => :'DeliveryCity',
        :'delivery_country' => :'DeliveryCountry',
        :'delivery_date' => :'DeliveryDate',
        :'delivery_name' => :'DeliveryName',
        :'delivery_zip_code' => :'DeliveryZipCode',
        :'document_number' => :'DocumentNumber',
        :'email_information' => :'EmailInformation',
        :'expire_date' => :'ExpireDate',
        :'freight' => :'Freight',
        :'freight_vat' => :'FreightVAT',
        :'gross' => :'Gross',
        :'house_work' => :'HouseWork',
        :'invoice_reference' => :'InvoiceReference',
        :'language' => :'Language',
        :'net' => :'Net',
        :'not_completed' => :'NotCompleted',
        :'offer_date' => :'OfferDate',
        :'offer_rows' => :'OfferRows',
        :'order_reference' => :'OrderReference',
        :'organisation_number' => :'OrganisationNumber',
        :'our_reference' => :'OurReference',
        :'phone1' => :'Phone1',
        :'phone2' => :'Phone2',
        :'price_list' => :'PriceList',
        :'print_template' => :'PrintTemplate',
        :'project' => :'Project',
        :'remarks' => :'Remarks',
        :'round_off' => :'RoundOff',
        :'sent' => :'Sent',
        :'tax_reduction' => :'TaxReduction',
        :'terms_of_delivery' => :'TermsOfDelivery',
        :'terms_of_payment' => :'TermsOfPayment',
        :'total' => :'Total',
        :'total_to_pay' => :'TotalToPay',
        :'total_vat' => :'TotalVat',
        :'vat_included' => :'VatIncluded',
        :'way_of_delivery' => :'WayOfDelivery',
        :'your_reference' => :'YourReference',
        :'your_reference_number' => :'YourReferenceNumber',
        :'zip_code' => :'ZipCode'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'url' => :'Object',
        :'url_tax_reduction_list' => :'Object',
        :'administration_fee' => :'Object',
        :'administration_fee_vat' => :'Object',
        :'address1' => :'Object',
        :'address2' => :'Object',
        :'basis_tax_reduction' => :'Object',
        :'cancelled' => :'Object',
        :'city' => :'Object',
        :'comments' => :'Object',
        :'contribution_percent' => :'Object',
        :'contribution_value' => :'Object',
        :'copy_remarks' => :'Object',
        :'country' => :'Object',
        :'cost_center' => :'Object',
        :'currency' => :'Object',
        :'currency_rate' => :'Object',
        :'currency_unit' => :'Object',
        :'customer_name' => :'Object',
        :'customer_number' => :'Object',
        :'delivery_address1' => :'Object',
        :'delivery_address2' => :'Object',
        :'delivery_city' => :'Object',
        :'delivery_country' => :'Object',
        :'delivery_date' => :'Object',
        :'delivery_name' => :'Object',
        :'delivery_zip_code' => :'Object',
        :'document_number' => :'Object',
        :'email_information' => :'Object',
        :'expire_date' => :'Object',
        :'freight' => :'Object',
        :'freight_vat' => :'Object',
        :'gross' => :'Object',
        :'house_work' => :'Object',
        :'invoice_reference' => :'Object',
        :'language' => :'Object',
        :'net' => :'Object',
        :'not_completed' => :'Object',
        :'offer_date' => :'Object',
        :'offer_rows' => :'Object',
        :'order_reference' => :'Object',
        :'organisation_number' => :'Object',
        :'our_reference' => :'Object',
        :'phone1' => :'Object',
        :'phone2' => :'Object',
        :'price_list' => :'Object',
        :'print_template' => :'Object',
        :'project' => :'Object',
        :'remarks' => :'Object',
        :'round_off' => :'Object',
        :'sent' => :'Object',
        :'tax_reduction' => :'Object',
        :'terms_of_delivery' => :'Object',
        :'terms_of_payment' => :'Object',
        :'total' => :'Object',
        :'total_to_pay' => :'Object',
        :'total_vat' => :'Object',
        :'vat_included' => :'Object',
        :'way_of_delivery' => :'Object',
        :'your_reference' => :'Object',
        :'your_reference_number' => :'Object',
        :'zip_code' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `StandoutFortnox::OfferOffer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `StandoutFortnox::OfferOffer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'url_tax_reduction_list')
        self.url_tax_reduction_list = attributes[:'url_tax_reduction_list']
      end

      if attributes.key?(:'administration_fee')
        self.administration_fee = attributes[:'administration_fee']
      end

      if attributes.key?(:'administration_fee_vat')
        self.administration_fee_vat = attributes[:'administration_fee_vat']
      end

      if attributes.key?(:'address1')
        self.address1 = attributes[:'address1']
      end

      if attributes.key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.key?(:'basis_tax_reduction')
        self.basis_tax_reduction = attributes[:'basis_tax_reduction']
      end

      if attributes.key?(:'cancelled')
        self.cancelled = attributes[:'cancelled']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'comments')
        self.comments = attributes[:'comments']
      end

      if attributes.key?(:'contribution_percent')
        self.contribution_percent = attributes[:'contribution_percent']
      end

      if attributes.key?(:'contribution_value')
        self.contribution_value = attributes[:'contribution_value']
      end

      if attributes.key?(:'copy_remarks')
        self.copy_remarks = attributes[:'copy_remarks']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'cost_center')
        self.cost_center = attributes[:'cost_center']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'currency_rate')
        self.currency_rate = attributes[:'currency_rate']
      end

      if attributes.key?(:'currency_unit')
        self.currency_unit = attributes[:'currency_unit']
      end

      if attributes.key?(:'customer_name')
        self.customer_name = attributes[:'customer_name']
      end

      if attributes.key?(:'customer_number')
        self.customer_number = attributes[:'customer_number']
      end

      if attributes.key?(:'delivery_address1')
        self.delivery_address1 = attributes[:'delivery_address1']
      end

      if attributes.key?(:'delivery_address2')
        self.delivery_address2 = attributes[:'delivery_address2']
      end

      if attributes.key?(:'delivery_city')
        self.delivery_city = attributes[:'delivery_city']
      end

      if attributes.key?(:'delivery_country')
        self.delivery_country = attributes[:'delivery_country']
      end

      if attributes.key?(:'delivery_date')
        self.delivery_date = attributes[:'delivery_date']
      end

      if attributes.key?(:'delivery_name')
        self.delivery_name = attributes[:'delivery_name']
      end

      if attributes.key?(:'delivery_zip_code')
        self.delivery_zip_code = attributes[:'delivery_zip_code']
      end

      if attributes.key?(:'document_number')
        self.document_number = attributes[:'document_number']
      end

      if attributes.key?(:'email_information')
        self.email_information = attributes[:'email_information']
      end

      if attributes.key?(:'expire_date')
        self.expire_date = attributes[:'expire_date']
      end

      if attributes.key?(:'freight')
        self.freight = attributes[:'freight']
      end

      if attributes.key?(:'freight_vat')
        self.freight_vat = attributes[:'freight_vat']
      end

      if attributes.key?(:'gross')
        self.gross = attributes[:'gross']
      end

      if attributes.key?(:'house_work')
        self.house_work = attributes[:'house_work']
      end

      if attributes.key?(:'invoice_reference')
        self.invoice_reference = attributes[:'invoice_reference']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'net')
        self.net = attributes[:'net']
      end

      if attributes.key?(:'not_completed')
        self.not_completed = attributes[:'not_completed']
      end

      if attributes.key?(:'offer_date')
        self.offer_date = attributes[:'offer_date']
      end

      if attributes.key?(:'offer_rows')
        if (value = attributes[:'offer_rows']).is_a?(Array)
          self.offer_rows = value
        end
      end

      if attributes.key?(:'order_reference')
        self.order_reference = attributes[:'order_reference']
      end

      if attributes.key?(:'organisation_number')
        self.organisation_number = attributes[:'organisation_number']
      end

      if attributes.key?(:'our_reference')
        self.our_reference = attributes[:'our_reference']
      end

      if attributes.key?(:'phone1')
        self.phone1 = attributes[:'phone1']
      end

      if attributes.key?(:'phone2')
        self.phone2 = attributes[:'phone2']
      end

      if attributes.key?(:'price_list')
        self.price_list = attributes[:'price_list']
      end

      if attributes.key?(:'print_template')
        self.print_template = attributes[:'print_template']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'round_off')
        self.round_off = attributes[:'round_off']
      end

      if attributes.key?(:'sent')
        self.sent = attributes[:'sent']
      end

      if attributes.key?(:'tax_reduction')
        self.tax_reduction = attributes[:'tax_reduction']
      end

      if attributes.key?(:'terms_of_delivery')
        self.terms_of_delivery = attributes[:'terms_of_delivery']
      end

      if attributes.key?(:'terms_of_payment')
        self.terms_of_payment = attributes[:'terms_of_payment']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'total_to_pay')
        self.total_to_pay = attributes[:'total_to_pay']
      end

      if attributes.key?(:'total_vat')
        self.total_vat = attributes[:'total_vat']
      end

      if attributes.key?(:'vat_included')
        self.vat_included = attributes[:'vat_included']
      end

      if attributes.key?(:'way_of_delivery')
        self.way_of_delivery = attributes[:'way_of_delivery']
      end

      if attributes.key?(:'your_reference')
        self.your_reference = attributes[:'your_reference']
      end

      if attributes.key?(:'your_reference_number')
        self.your_reference_number = attributes[:'your_reference_number']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          url_tax_reduction_list == o.url_tax_reduction_list &&
          administration_fee == o.administration_fee &&
          administration_fee_vat == o.administration_fee_vat &&
          address1 == o.address1 &&
          address2 == o.address2 &&
          basis_tax_reduction == o.basis_tax_reduction &&
          cancelled == o.cancelled &&
          city == o.city &&
          comments == o.comments &&
          contribution_percent == o.contribution_percent &&
          contribution_value == o.contribution_value &&
          copy_remarks == o.copy_remarks &&
          country == o.country &&
          cost_center == o.cost_center &&
          currency == o.currency &&
          currency_rate == o.currency_rate &&
          currency_unit == o.currency_unit &&
          customer_name == o.customer_name &&
          customer_number == o.customer_number &&
          delivery_address1 == o.delivery_address1 &&
          delivery_address2 == o.delivery_address2 &&
          delivery_city == o.delivery_city &&
          delivery_country == o.delivery_country &&
          delivery_date == o.delivery_date &&
          delivery_name == o.delivery_name &&
          delivery_zip_code == o.delivery_zip_code &&
          document_number == o.document_number &&
          email_information == o.email_information &&
          expire_date == o.expire_date &&
          freight == o.freight &&
          freight_vat == o.freight_vat &&
          gross == o.gross &&
          house_work == o.house_work &&
          invoice_reference == o.invoice_reference &&
          language == o.language &&
          net == o.net &&
          not_completed == o.not_completed &&
          offer_date == o.offer_date &&
          offer_rows == o.offer_rows &&
          order_reference == o.order_reference &&
          organisation_number == o.organisation_number &&
          our_reference == o.our_reference &&
          phone1 == o.phone1 &&
          phone2 == o.phone2 &&
          price_list == o.price_list &&
          print_template == o.print_template &&
          project == o.project &&
          remarks == o.remarks &&
          round_off == o.round_off &&
          sent == o.sent &&
          tax_reduction == o.tax_reduction &&
          terms_of_delivery == o.terms_of_delivery &&
          terms_of_payment == o.terms_of_payment &&
          total == o.total &&
          total_to_pay == o.total_to_pay &&
          total_vat == o.total_vat &&
          vat_included == o.vat_included &&
          way_of_delivery == o.way_of_delivery &&
          your_reference == o.your_reference &&
          your_reference_number == o.your_reference_number &&
          zip_code == o.zip_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [url, url_tax_reduction_list, administration_fee, administration_fee_vat, address1, address2, basis_tax_reduction, cancelled, city, comments, contribution_percent, contribution_value, copy_remarks, country, cost_center, currency, currency_rate, currency_unit, customer_name, customer_number, delivery_address1, delivery_address2, delivery_city, delivery_country, delivery_date, delivery_name, delivery_zip_code, document_number, email_information, expire_date, freight, freight_vat, gross, house_work, invoice_reference, language, net, not_completed, offer_date, offer_rows, order_reference, organisation_number, our_reference, phone1, phone2, price_list, print_template, project, remarks, round_off, sent, tax_reduction, terms_of_delivery, terms_of_payment, total, total_to_pay, total_vat, vat_included, way_of_delivery, your_reference, your_reference_number, zip_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        StandoutFortnox.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
