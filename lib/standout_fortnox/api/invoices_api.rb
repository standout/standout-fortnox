=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.23

=end

require 'uri'

module StandoutFortnox
  class InvoicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add an invoice
    # Add an invoice
    # @param body Invoice object that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def add_invoice(body, opts = {})
      data, _status_code, _headers = add_invoice_with_http_info(body, opts)
      data
    end

    # Add an invoice
    # Add an invoice
    # @param body Invoice object that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def add_invoice_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.add_invoice ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InvoicesApi.add_invoice"
      end
      # resource path
      local_var_path = '/invoices'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#add_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Bookkeep an invoice
    # Bookkeep an invoice
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def bookkeep_invoice(document_number, opts = {})
      data, _status_code, _headers = bookkeep_invoice_with_http_info(document_number, opts)
      data
    end

    # Bookkeep an invoice
    # Bookkeep an invoice
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def bookkeep_invoice_with_http_info(document_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.bookkeep_invoice ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.bookkeep_invoice"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}/bookkeep'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#bookkeep_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel an invoice
    # Cancels an invoice (same as “Makulerad” in the GUI)
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def cancel_invoice(document_number, opts = {})
      data, _status_code, _headers = cancel_invoice_with_http_info(document_number, opts)
      data
    end

    # Cancel an invoice
    # Cancels an invoice (same as “Makulerad” in the GUI)
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def cancel_invoice_with_http_info(document_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.cancel_invoice ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.cancel_invoice"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}/cancel'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#cancel_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Credit an invoice
    # Creates a credit invoice from the provided invoice. The created credit invoice will be referenced in the property CreditInvoiceReference.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def credit_invoice(document_number, opts = {})
      data, _status_code, _headers = credit_invoice_with_http_info(document_number, opts)
      data
    end

    # Credit an invoice
    # Creates a credit invoice from the provided invoice. The created credit invoice will be referenced in the property CreditInvoiceReference.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def credit_invoice_with_http_info(document_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.credit_invoice ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.credit_invoice"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}/credit'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#credit_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send an e-invoice
    # Sends an e-invoice to the customer with an attached PDF document of the invoice. Note that this action also sets the property Sent as true.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def e_invoice(document_number, opts = {})
      data, _status_code, _headers = e_invoice_with_http_info(document_number, opts)
      data
    end

    # Send an e-invoice
    # Sends an e-invoice to the customer with an attached PDF document of the invoice. Note that this action also sets the property Sent as true.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def e_invoice_with_http_info(document_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.e_invoice ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.e_invoice"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}/einvoice'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#e_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Email an invoice
    # Sends an e-mail to the customer with an attached PDF document of the invoice. You can use the properties in the EmailInformation to customize the e-mail message on each invoice.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def email_invoice(document_number, opts = {})
      data, _status_code, _headers = email_invoice_with_http_info(document_number, opts)
      data
    end

    # Email an invoice
    # Sends an e-mail to the customer with an attached PDF document of the invoice. You can use the properties in the EmailInformation to customize the e-mail message on each invoice.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def email_invoice_with_http_info(document_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.email_invoice ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.email_invoice"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}/email'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#email_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mark invoice as 'Sent' without generating a PDF
    # This action is used to set the field Sent as true from an external system without generating a PDF.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def external_print_invoice(document_number, opts = {})
      data, _status_code, _headers = external_print_invoice_with_http_info(document_number, opts)
      data
    end

    # Mark invoice as &#39;Sent&#39; without generating a PDF
    # This action is used to set the field Sent as true from an external system without generating a PDF.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def external_print_invoice_with_http_info(document_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.external_print_invoice ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.external_print_invoice"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}/externalprint'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#external_print_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all cancelled invoices
    # Retrieves all invoices with the status 'cancelled'
    # @param [Hash] opts the optional parameters
    # @return [Invoices]
    def get_cancelled_invoices(opts = {})
      data, _status_code, _headers = get_cancelled_invoices_with_http_info(opts)
      data
    end

    # Get all cancelled invoices
    # Retrieves all invoices with the status &#39;cancelled&#39;
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoices, Fixnum, Hash)>] Invoices data, response status code and response headers
    def get_cancelled_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.get_cancelled_invoices ...'
      end
      # resource path
      local_var_path = '/invoices/?filter=cancelled'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_cancelled_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all fully paid invoices
    # Retrieves all invoices that has been fully paid
    # @param [Hash] opts the optional parameters
    # @return [Invoices]
    def get_fully_paid_invoices(opts = {})
      data, _status_code, _headers = get_fully_paid_invoices_with_http_info(opts)
      data
    end

    # Get all fully paid invoices
    # Retrieves all invoices that has been fully paid
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoices, Fixnum, Hash)>] Invoices data, response status code and response headers
    def get_fully_paid_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.get_fully_paid_invoices ...'
      end
      # resource path
      local_var_path = '/invoices/?filter=fullypaid'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_fully_paid_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific invoice
    # Retrieves the details of an invoice. You need to supply the unique document number that was returned when the invoice was created or retrieved from the list of invoices.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def get_invoice(document_number, opts = {})
      data, _status_code, _headers = get_invoice_with_http_info(document_number, opts)
      data
    end

    # Get a specific invoice
    # Retrieves the details of an invoice. You need to supply the unique document number that was returned when the invoice was created or retrieved from the list of invoices.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def get_invoice_with_http_info(document_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.get_invoice ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.get_invoice"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all invoices
    # Get all invoices
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :filter Retrieves all invoices matching given filter
    # @option opts [Object] :offset 
    # @option opts [Object] :limit 
    # @option opts [Object] :sortby Which property to sort by, must be defined as sortable in documentation
    # @option opts [Object] :sortorder 
    # @option opts [Object] :page 
    # @option opts [Object] :lastmodified Retrieves all records since the provided timestamp
    # @option opts [Object] :fromdate Defines a selection based on a start date.
    # @option opts [Object] :todate Defines a selection based on an end date.
    # @option opts [Object] :costcenter Get only invoices inluding given value for CostCenter
    # @option opts [Object] :currency Get only invoices inluding given value for Currency
    # @option opts [Object] :customername Get only invoices inluding given value for CustomerName
    # @option opts [Object] :customernumber Get only invoices inluding given value for CustomerNumber
    # @option opts [Object] :documentnumber Get only invoices inluding given value for DocumentNumber
    # @option opts [Object] :externalinvoicereference1 Get only invoices inluding given value for ExternalInvoiceReference1
    # @option opts [Object] :externalinvoicereference2 Get only invoices inluding given value for ExternalInvoiceReference2
    # @option opts [Object] :ocr Get only invoices inluding given value for OCR
    # @option opts [Object] :ourreference Get only invoices inluding given value for OurReference
    # @option opts [Object] :project Get only invoices inluding given value for Project
    # @option opts [Object] :yourordernumber Get only invoices inluding given value for YourOrderNumber
    # @option opts [Object] :yourreference Get only invoices inluding given value for YourReference
    # @return [Invoices]
    def get_invoices(opts = {})
      data, _status_code, _headers = get_invoices_with_http_info(opts)
      data
    end

    # Get all invoices
    # Get all invoices
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :filter Retrieves all invoices matching given filter
    # @option opts [Object] :offset 
    # @option opts [Object] :limit 
    # @option opts [Object] :sortby Which property to sort by, must be defined as sortable in documentation
    # @option opts [Object] :sortorder 
    # @option opts [Object] :page 
    # @option opts [Object] :lastmodified Retrieves all records since the provided timestamp
    # @option opts [Object] :fromdate Defines a selection based on a start date.
    # @option opts [Object] :todate Defines a selection based on an end date.
    # @option opts [Object] :costcenter Get only invoices inluding given value for CostCenter
    # @option opts [Object] :currency Get only invoices inluding given value for Currency
    # @option opts [Object] :customername Get only invoices inluding given value for CustomerName
    # @option opts [Object] :customernumber Get only invoices inluding given value for CustomerNumber
    # @option opts [Object] :documentnumber Get only invoices inluding given value for DocumentNumber
    # @option opts [Object] :externalinvoicereference1 Get only invoices inluding given value for ExternalInvoiceReference1
    # @option opts [Object] :externalinvoicereference2 Get only invoices inluding given value for ExternalInvoiceReference2
    # @option opts [Object] :ocr Get only invoices inluding given value for OCR
    # @option opts [Object] :ourreference Get only invoices inluding given value for OurReference
    # @option opts [Object] :project Get only invoices inluding given value for Project
    # @option opts [Object] :yourordernumber Get only invoices inluding given value for YourOrderNumber
    # @option opts [Object] :yourreference Get only invoices inluding given value for YourReference
    # @return [Array<(Invoices, Fixnum, Hash)>] Invoices data, response status code and response headers
    def get_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.get_invoices ...'
      end
      # resource path
      local_var_path = '/invoices'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sortby'] = opts[:'sortby'] if !opts[:'sortby'].nil?
      query_params[:'sortorder'] = opts[:'sortorder'] if !opts[:'sortorder'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'lastmodified'] = opts[:'lastmodified'] if !opts[:'lastmodified'].nil?
      query_params[:'fromdate'] = opts[:'fromdate'] if !opts[:'fromdate'].nil?
      query_params[:'todate'] = opts[:'todate'] if !opts[:'todate'].nil?
      query_params[:'costcenter'] = opts[:'costcenter'] if !opts[:'costcenter'].nil?
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?
      query_params[:'customername'] = opts[:'customername'] if !opts[:'customername'].nil?
      query_params[:'customernumber'] = opts[:'customernumber'] if !opts[:'customernumber'].nil?
      query_params[:'documentnumber'] = opts[:'documentnumber'] if !opts[:'documentnumber'].nil?
      query_params[:'externalinvoicereference1'] = opts[:'externalinvoicereference1'] if !opts[:'externalinvoicereference1'].nil?
      query_params[:'externalinvoicereference2'] = opts[:'externalinvoicereference2'] if !opts[:'externalinvoicereference2'].nil?
      query_params[:'ocr'] = opts[:'ocr'] if !opts[:'ocr'].nil?
      query_params[:'ourreference'] = opts[:'ourreference'] if !opts[:'ourreference'].nil?
      query_params[:'project'] = opts[:'project'] if !opts[:'project'].nil?
      query_params[:'yourordernumber'] = opts[:'yourordernumber'] if !opts[:'yourordernumber'].nil?
      query_params[:'yourreference'] = opts[:'yourreference'] if !opts[:'yourreference'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all unbooked invoices
    # Retrieves all invoices that is unbooked
    # @param [Hash] opts the optional parameters
    # @return [Invoices]
    def get_unbooked_invoices(opts = {})
      data, _status_code, _headers = get_unbooked_invoices_with_http_info(opts)
      data
    end

    # Get all unbooked invoices
    # Retrieves all invoices that is unbooked
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoices, Fixnum, Hash)>] Invoices data, response status code and response headers
    def get_unbooked_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.get_unbooked_invoices ...'
      end
      # resource path
      local_var_path = '/invoices/?filter=unbooked'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_unbooked_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all unpaid and overdue invoices
    # Retrieves all invoices that is unpaid and overdue
    # @param [Hash] opts the optional parameters
    # @return [Invoices]
    def get_unpaid_and_overdue_invoices(opts = {})
      data, _status_code, _headers = get_unpaid_and_overdue_invoices_with_http_info(opts)
      data
    end

    # Get all unpaid and overdue invoices
    # Retrieves all invoices that is unpaid and overdue
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoices, Fixnum, Hash)>] Invoices data, response status code and response headers
    def get_unpaid_and_overdue_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.get_unpaid_and_overdue_invoices ...'
      end
      # resource path
      local_var_path = '/invoices/?filter=unpaidoverdue'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_unpaid_and_overdue_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all unpaid invoices
    # Retrieves all invoices that is unpaid
    # @param [Hash] opts the optional parameters
    # @return [Invoices]
    def get_unpaid_invoices(opts = {})
      data, _status_code, _headers = get_unpaid_invoices_with_http_info(opts)
      data
    end

    # Get all unpaid invoices
    # Retrieves all invoices that is unpaid
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoices, Fixnum, Hash)>] Invoices data, response status code and response headers
    def get_unpaid_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.get_unpaid_invoices ...'
      end
      # resource path
      local_var_path = '/invoices/?filter=unpaid'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_unpaid_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Preview an invoice
    # This action returns a PDF document with the current template that is used by the specific document. Unliike the action print, this action doesn’t set the property Sent as true.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def preview_invoice(document_number, opts = {})
      data, _status_code, _headers = preview_invoice_with_http_info(document_number, opts)
      data
    end

    # Preview an invoice
    # This action returns a PDF document with the current template that is used by the specific document. Unliike the action print, this action doesn’t set the property Sent as true.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def preview_invoice_with_http_info(document_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.preview_invoice ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.preview_invoice"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}/preview'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#preview_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Print an invoice
    # This action returns a PDF document with the current template that is used by the specific document. Note that this action also sets the property Sent as true.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def print_invoice(document_number, opts = {})
      data, _status_code, _headers = print_invoice_with_http_info(document_number, opts)
      data
    end

    # Print an invoice
    # This action returns a PDF document with the current template that is used by the specific document. Note that this action also sets the property Sent as true.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def print_invoice_with_http_info(document_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.print_invoice ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.print_invoice"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}/print'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#print_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Print an invoice reminder
    # This action returns a PDF document with the current reminder template that is used by the specific document. Note that this action also sets the property Sent as true.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def print_invoice_reminder(document_number, opts = {})
      data, _status_code, _headers = print_invoice_reminder_with_http_info(document_number, opts)
      data
    end

    # Print an invoice reminder
    # This action returns a PDF document with the current reminder template that is used by the specific document. Note that this action also sets the property Sent as true.
    # @param document_number Document number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def print_invoice_reminder_with_http_info(document_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.print_invoice_reminder ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.print_invoice_reminder"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}/printreminder'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#print_invoice_reminder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update invoice
    # Update an invoice, find by document number
    # @param document_number documentNumber of invoice to update
    # @param body Invoice object to be updated
    # @param [Hash] opts the optional parameters
    # @return [Invoice]
    def update_invoice(document_number, body, opts = {})
      data, _status_code, _headers = update_invoice_with_http_info(document_number, body, opts)
      data
    end

    # Update invoice
    # Update an invoice, find by document number
    # @param document_number documentNumber of invoice to update
    # @param body Invoice object to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoice, Fixnum, Hash)>] Invoice data, response status code and response headers
    def update_invoice_with_http_info(document_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvoicesApi.update_invoice ...'
      end
      # verify the required parameter 'document_number' is set
      if @api_client.config.client_side_validation && document_number.nil?
        fail ArgumentError, "Missing the required parameter 'document_number' when calling InvoicesApi.update_invoice"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InvoicesApi.update_invoice"
      end
      # resource path
      local_var_path = '/invoices/{documentNumber}'.sub('{' + 'documentNumber' + '}', document_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#update_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
