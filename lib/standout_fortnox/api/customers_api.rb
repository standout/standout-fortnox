=begin
#Fortnox Swagger

#Fortnox API Swagger

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.18

=end

require 'uri'

module StandoutFortnox
  class CustomersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create customer
    # Create customer
    # @param body Customer object that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [Customers]
    def add_customer(body, opts = {})
      data, _status_code, _headers = add_customer_with_http_info(body, opts)
      data
    end

    # Create customer
    # Create customer
    # @param body Customer object that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customers, Fixnum, Hash)>] Customers data, response status code and response headers
    def add_customer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.add_customer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.add_customer"
      end
      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['access_token', 'client_secret']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customers')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#add_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete customer
    # Delete customer
    # @param customer_id ID of customer to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_customer(customer_id, opts = {})
      delete_customer_with_http_info(customer_id, opts)
      nil
    end

    # Delete customer
    # Delete customer
    # @param customer_id ID of customer to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.delete_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.delete_customer"
      end
      # resource path
      local_var_path = '/customers/{customerId}'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'client_secret']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#delete_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check for active customers
    # Retrieves all customers that are active
    # @param [Hash] opts the optional parameters
    # @return [Customers]
    def get_active_customers(opts = {})
      data, _status_code, _headers = get_active_customers_with_http_info(opts)
      data
    end

    # Check for active customers
    # Retrieves all customers that are active
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customers, Fixnum, Hash)>] Customers data, response status code and response headers
    def get_active_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_active_customers ...'
      end
      # resource path
      local_var_path = '/customers/?filter=active'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'client_secret']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customers')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_active_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get customer by Id
    # Get customer by Id
    # @param customer_id ID of customer to return
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def get_customer(customer_id, opts = {})
      data, _status_code, _headers = get_customer_with_http_info(customer_id, opts)
      data
    end

    # Get customer by Id
    # Get customer by Id
    # @param customer_id ID of customer to return
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def get_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.get_customer"
      end
      # resource path
      local_var_path = '/customers/{customerId}'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'client_secret']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all customers
    # Get all customers
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :filter Retrieves all customers matching given filter
    # @option opts [Object] :offset 
    # @option opts [Object] :limit 
    # @option opts [Object] :sortby Which property to sort by, must be defined as sortable in documentation
    # @option opts [Object] :sortorder 
    # @option opts [Object] :page 
    # @option opts [Object] :lastmodified Retrieves all records since the provided timestamp
    # @option opts [Object] :fromdate Defines a selection based on a start date.
    # @option opts [Object] :todate Defines a selection based on an end date.
    # @option opts [Object] :city Get only customers inluding given value for City
    # @option opts [Object] :customernumber Get only customers inluding given value for CustomerNumber
    # @option opts [Object] :email Get only customers inluding given value for Email
    # @option opts [Object] :gln Get only customers inluding given value for GLN
    # @option opts [Object] :glndelivery Get only customers inluding given value for GLNDelivery
    # @option opts [Object] :organisationnumber Get only customers inluding given value for OrganisationNumber
    # @option opts [Object] :phone1 Get only customers inluding given value for Phone1
    # @option opts [Object] :zipcode Get only customers inluding given value for ZipCode
    # @return [Customers]
    def get_customers(opts = {})
      data, _status_code, _headers = get_customers_with_http_info(opts)
      data
    end

    # Get all customers
    # Get all customers
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :filter Retrieves all customers matching given filter
    # @option opts [Object] :offset 
    # @option opts [Object] :limit 
    # @option opts [Object] :sortby Which property to sort by, must be defined as sortable in documentation
    # @option opts [Object] :sortorder 
    # @option opts [Object] :page 
    # @option opts [Object] :lastmodified Retrieves all records since the provided timestamp
    # @option opts [Object] :fromdate Defines a selection based on a start date.
    # @option opts [Object] :todate Defines a selection based on an end date.
    # @option opts [Object] :city Get only customers inluding given value for City
    # @option opts [Object] :customernumber Get only customers inluding given value for CustomerNumber
    # @option opts [Object] :email Get only customers inluding given value for Email
    # @option opts [Object] :gln Get only customers inluding given value for GLN
    # @option opts [Object] :glndelivery Get only customers inluding given value for GLNDelivery
    # @option opts [Object] :organisationnumber Get only customers inluding given value for OrganisationNumber
    # @option opts [Object] :phone1 Get only customers inluding given value for Phone1
    # @option opts [Object] :zipcode Get only customers inluding given value for ZipCode
    # @return [Array<(Customers, Fixnum, Hash)>] Customers data, response status code and response headers
    def get_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customers ...'
      end
      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'sortby'] = opts[:'sortby'] if !opts[:'sortby'].nil?
      query_params[:'sortorder'] = opts[:'sortorder'] if !opts[:'sortorder'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'lastmodified'] = opts[:'lastmodified'] if !opts[:'lastmodified'].nil?
      query_params[:'fromdate'] = opts[:'fromdate'] if !opts[:'fromdate'].nil?
      query_params[:'todate'] = opts[:'todate'] if !opts[:'todate'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'customernumber'] = opts[:'customernumber'] if !opts[:'customernumber'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'gln'] = opts[:'gln'] if !opts[:'gln'].nil?
      query_params[:'glndelivery'] = opts[:'glndelivery'] if !opts[:'glndelivery'].nil?
      query_params[:'organisationnumber'] = opts[:'organisationnumber'] if !opts[:'organisationnumber'].nil?
      query_params[:'phone1'] = opts[:'phone1'] if !opts[:'phone1'].nil?
      query_params[:'zipcode'] = opts[:'zipcode'] if !opts[:'zipcode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'client_secret']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customers')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check for inactive customers
    # Retrieves all customers that are inactive
    # @param [Hash] opts the optional parameters
    # @return [Customers]
    def get_inactive_customers(opts = {})
      data, _status_code, _headers = get_inactive_customers_with_http_info(opts)
      data
    end

    # Check for inactive customers
    # Retrieves all customers that are inactive
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customers, Fixnum, Hash)>] Customers data, response status code and response headers
    def get_inactive_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_inactive_customers ...'
      end
      # resource path
      local_var_path = '/customers/?filter=inactive'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'client_secret']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customers')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_inactive_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update customer
    # Update customer
    # @param customer_id ID of customer to update
    # @param body Customer object that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def update_customer(customer_id, body, opts = {})
      data, _status_code, _headers = update_customer_with_http_info(customer_id, body, opts)
      data
    end

    # Update customer
    # Update customer
    # @param customer_id ID of customer to update
    # @param body Customer object that needs to be added
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def update_customer_with_http_info(customer_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.update_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.update_customer"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CustomersApi.update_customer"
      end
      # resource path
      local_var_path = '/customers/{customerId}'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['access_token', 'client_secret']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#update_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
